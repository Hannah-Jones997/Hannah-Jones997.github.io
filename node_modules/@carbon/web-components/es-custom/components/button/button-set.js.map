{"version":3,"file":"button-set.js","sources":["../../../src/components/button/button-set.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2020, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { BUTTON_KIND } from './defs';\nimport styles from './button.scss?lit';\nimport { prefix } from '../../globals/settings';\nimport CDSButtonSetBase from './button-set-base';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Button set.\n *\n * @element cds-custom-button-set\n */\n@customElement(`${prefix}-button-set`)\nclass CDSButtonSet extends CDSButtonSetBase {\n  /**\n   * `true` if the buttons should be stacked. Only applies to the button-set variant.\n   */\n  @property({ type: Boolean, reflect: true })\n  stacked = false;\n\n  /**\n   * Handler for @slotchange, set the first cds-custom-button to kind secondary and primary for the remaining ones\n   *\n   * @private\n   */\n  protected _handleSlotChange(event: Event) {\n    const childItems = (event.target as HTMLSlotElement)\n      .assignedNodes()\n      .filter((elem) =>\n        (elem as HTMLElement).matches !== undefined\n          ? (elem as HTMLElement).matches(\n              (this.constructor as typeof CDSButtonSet).selectorItem\n            )\n          : false\n      );\n\n    childItems.forEach((elem, index) => {\n      (elem as HTMLElement).setAttribute(\n        'kind',\n        index === 0 ? BUTTON_KIND.SECONDARY : BUTTON_KIND.PRIMARY\n      );\n    });\n\n    const update = new CustomEvent(`${prefix}-btn-set-update`, {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n    });\n\n    this.dispatchEvent(update);\n  }\n\n  render() {\n    const { stacked } = this;\n    const defaultClasses = {\n      [`${prefix}--btn-set--stacked`]: stacked,\n    };\n    const classes = classMap(defaultClasses);\n\n    return html`<slot class=\"${classes} @slotchange=\"${this._handleSlotChange}\"></slot>`;\n  }\n  /**\n   * A selector that will return the child items.\n   */\n  static get selectorItem() {\n    return `${prefix}-button`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSButtonSet;\n"],"names":["styles","customElement"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;AAKG;AAWH;;;;AAIG;AAEH,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,gBAAgB,CAAA;AAA3C,IAAA,WAAA,GAAA;;AACE;;AAEG;QAEH,IAAO,CAAA,OAAA,GAAG,KAAK;;AAEf;;;;AAIG;AACO,IAAA,iBAAiB,CAAC,KAAY,EAAA;AACtC,QAAA,MAAM,UAAU,GAAI,KAAK,CAAC;AACvB,aAAA,aAAa;aACb,MAAM,CAAC,CAAC,IAAI,KACV,IAAoB,CAAC,OAAO,KAAK;cAC7B,IAAoB,CAAC,OAAO,CAC1B,IAAI,CAAC,WAAmC,CAAC,YAAY;cAExD,KAAK,CACV;QAEH,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,KAAI;YAChC,IAAoB,CAAC,YAAY,CAChC,MAAM,EACN,KAAK,KAAK,CAAC,GAAG,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,OAAO,CAC1D;AACH,SAAC,CAAC;QAEF,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,CAAG,EAAA,MAAM,iBAAiB,EAAE;AACzD,YAAA,OAAO,EAAE,IAAI;AACb,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,QAAQ,EAAE,IAAI;AACf,SAAA,CAAC;AAEF,QAAA,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;;IAG5B,MAAM,GAAA;AACJ,QAAA,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI;AACxB,QAAA,MAAM,cAAc,GAAG;AACrB,YAAA,CAAC,CAAG,EAAA,MAAM,CAAoB,kBAAA,CAAA,GAAG,OAAO;SACzC;AACD,QAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC;QAExC,OAAO,IAAI,CAAA,CAAgB,aAAA,EAAA,OAAO,iBAAiB,IAAI,CAAC,iBAAiB,CAAA,SAAA,CAAW;;AAEtF;;AAEG;AACH,IAAA,WAAW,YAAY,GAAA;QACrB,OAAO,CAAA,EAAG,MAAM,CAAA,OAAA,CAAS;;;AAGpB,YAAM,CAAA,MAAA,GAAGA,YAAH;AAlDb,UAAA,CAAA;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;AAC1B,CAAA,EAAA,YAAA,CAAA,SAAA,EAAA,SAAA,EAAA,MAAA,CAAA;AALZ,YAAY,GAAA,UAAA,CAAA;AADjB,IAAAC,aAAa,CAAC,CAAA,EAAG,MAAM,CAAA,WAAA,CAAa;AAC/B,CAAA,EAAA,YAAY,CAwDjB;AAED,qBAAe,YAAY;;;;"}