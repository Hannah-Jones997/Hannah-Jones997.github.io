/**
 * Copyright IBM Corp. 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { __decorate } from 'tslib';
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { prefix } from '../../globals/settings.js';
import styles from './menu-item.scss.js';
import { carbonElement } from '../../globals/decorators/carbon-element.js';
import { consume } from '@lit/context';
import { MenuContext } from './menu-context.js';

/**
 * Copyright IBM Corp. 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Menu Item.
 *
 * @element cds-custom-menu-item-radio-group
 */
let CDSmenuItemRadioGroup = class CDSmenuItemRadioGroup extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * List of items in the radio group.
         */
        this.items = [];
    }
    /**
     * The name of the custom event fired when the selection state changes.
     */
    static get eventOnChange() {
        return `${prefix}-item-changed`;
    }
    firstUpdated() {
        this.context.updateFromChild({ hasSelectableItems: true });
        this.addEventListener(`click`, (e) => {
            this.selectedItem = e.target;
            const init = {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: {
                    triggeredBy: e.target,
                },
            };
            if (this.dispatchEvent(new CustomEvent(this.constructor.eventOnChange, init))) {
                this.dispatchEvent(new CustomEvent(this.constructor.eventOnChange, init));
            }
        });
    }
    updated(_changedProperties) {
        if (_changedProperties.has('selectedItem')) {
            this.querySelectorAll(`${prefix}-menu-item`).forEach((item) => {
                if (item === this.selectedItem) {
                    item.setAttribute('aria-checked', 'true');
                }
                else {
                    item.setAttribute('aria-checked', 'false');
                }
            });
        }
    }
    render() {
        const { label } = this;
        return html `
      <ul role="group" aria-label="${label}">
        <slot></slot>
      </ul>
    `;
    }
};
CDSmenuItemRadioGroup.styles = styles;
__decorate([
    consume({ context: MenuContext })
], CDSmenuItemRadioGroup.prototype, "context", void 0);
__decorate([
    property({ type: String })
], CDSmenuItemRadioGroup.prototype, "label", void 0);
__decorate([
    property({ type: Array })
], CDSmenuItemRadioGroup.prototype, "items", void 0);
__decorate([
    property({ type: String, attribute: true })
], CDSmenuItemRadioGroup.prototype, "selectedItem", void 0);
__decorate([
    property()
], CDSmenuItemRadioGroup.prototype, "itemToString", void 0);
CDSmenuItemRadioGroup = __decorate([
    carbonElement(`${prefix}-menu-item-radio-group`)
], CDSmenuItemRadioGroup);
var CDSmenuItemRadioGroup$1 = CDSmenuItemRadioGroup;

export { CDSmenuItemRadioGroup$1 as default };
//# sourceMappingURL=menu-item-radio-group.js.map
