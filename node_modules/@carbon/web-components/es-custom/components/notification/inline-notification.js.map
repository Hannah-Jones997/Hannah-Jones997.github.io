{"version":3,"file":"inline-notification.js","sources":["../../../src/components/notification/inline-notification.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport CheckmarkFilled20 from '@carbon/icons/lib/checkmark--filled/20.js';\nimport Close16 from '@carbon/icons/lib/close/16.js';\nimport ErrorFilled20 from '@carbon/icons/lib/error--filled/20.js';\nimport InformationFilled20 from '@carbon/icons/lib/information--filled/20.js';\nimport InformationSquareFilled20 from '@carbon/icons/lib/information--square--filled/20.js';\nimport WarningFilled20 from '@carbon/icons/lib/warning--filled/20.js';\nimport WarningAltFilled20 from '@carbon/icons/lib/warning--alt--filled/20.js';\nimport { LitElement, html, svg } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { prefix } from '../../globals/settings';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { NOTIFICATION_KIND, NOTIFICATION_TYPE } from './defs';\nimport styles from './inline-notification.scss?lit';\n\nexport { NOTIFICATION_KIND, NOTIFICATION_TYPE };\n\n/**\n * The default icons, keyed by notification kind.\n */\nconst iconsForKinds = {\n  [NOTIFICATION_KIND.SUCCESS]: CheckmarkFilled20,\n  [NOTIFICATION_KIND.INFO]: InformationFilled20,\n  [NOTIFICATION_KIND.INFO_SQUARE]: InformationSquareFilled20,\n  [NOTIFICATION_KIND.WARNING]: WarningFilled20,\n  [NOTIFICATION_KIND.WARNING_ALT]: WarningAltFilled20,\n  [NOTIFICATION_KIND.ERROR]: ErrorFilled20,\n};\n\n/**\n * Inline notification.\n *\n * @element cds-custom-inline-notification\n * @slot subtitle - The subtitle.\n * @slot title - The title.\n * @fires cds-custom-notification-beingclosed\n *   The custom event fired before this notification is being closed upon a user gesture.\n *   Cancellation of this event stops the user-initiated action of closing this notification.\n * @fires cds-custom-notification-closed - The custom event fired after this notification is closed upon a user gesture.\n */\n@customElement(`${prefix}-inline-notification`)\nclass CDSInlineNotification extends FocusMixin(LitElement) {\n  /**\n   * Current timeout identifier\n   */\n  protected _timeoutID: number | null = null;\n\n  /**\n   * Notification type.\n   */\n  protected _type = NOTIFICATION_TYPE.INLINE;\n\n  /**\n   * Cancels the current timeout configured for the notification\n   *\n   * @param timeoutID current timeout's identifier\n   */\n  protected _cancelTimeout(timeoutID: number) {\n    clearTimeout(timeoutID);\n    this._timeoutID = null;\n  }\n\n  /**\n   * Overrides (if exists) the timeout to close the notification\n   *\n   * @param timeout the time in ms\n   */\n  protected _initializeTimeout(timeout: number) {\n    if (this._timeoutID) {\n      this._cancelTimeout(this._timeoutID);\n    }\n    this._timeoutID = setTimeout(\n      this._handleUserOrTimerInitiatedClose.bind(this, null),\n      timeout\n    ) as unknown as number;\n  }\n\n  /**\n   * Handles `click` event on the close button.\n   *\n   * @param event The event.\n   * @param event.target The event target.\n   */\n  protected _handleClickCloseButton({ target }: MouseEvent) {\n    this._handleUserOrTimerInitiatedClose(target);\n  }\n\n  /**\n   * Handles user-initiated or through timer close request of this modal.\n   *\n   * @param triggeredBy The element that triggered this close request, if there is one.\n   */\n  protected _handleUserOrTimerInitiatedClose(triggeredBy: EventTarget | null) {\n    if (this.open) {\n      const init = {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: {\n          triggeredBy,\n        },\n      };\n      if (\n        this.dispatchEvent(\n          new CustomEvent(\n            (this.constructor as typeof CDSInlineNotification).eventBeforeClose,\n            init\n          )\n        )\n      ) {\n        this.open = false;\n        this.dispatchEvent(\n          new CustomEvent(\n            (this.constructor as typeof CDSInlineNotification).eventClose,\n            init\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @returns The template part for the close button.\n   */\n  protected _renderButton() {\n    const {\n      ariaLabel,\n      _type: type,\n      _handleClickCloseButton: handleClickCloseButton,\n    } = this;\n    return html`\n      <button\n        type=\"button\"\n        class=\"${prefix}--${type}-notification__close-button\"\n        aria-label=${ifDefined(ariaLabel)}\n        title=${ifDefined(ariaLabel)}\n        @click=\"${handleClickCloseButton}\">\n        ${Close16({\n          class: `${prefix}--${type}-notification__close-icon`,\n        })}\n      </button>\n    `;\n  }\n\n  /**\n   * @returns The template part for the text contents.\n   */\n  protected _renderText() {\n    const { subtitle, title, _type: type } = this;\n    return html`\n      <div class=\"${prefix}--${type}-notification__text-wrapper\">\n        <p class=\"${prefix}--${type}-notification__title\">\n          ${title}<slot name=\"title\"></slot>\n        </p>\n        <div class=\"${prefix}--${type}-notification__subtitle\">\n          ${subtitle}<slot name=\"subtitle\"></slot>\n        </div>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * @returns The template part for the icon.\n   */\n  protected _renderIcon() {\n    const { statusIconDescription, kind, _type: type } = this;\n    const { [kind]: icon } = iconsForKinds;\n    return !icon\n      ? undefined\n      : icon({\n          class: `${prefix}--${type}-notification__icon`,\n          children: !statusIconDescription\n            ? undefined\n            : svg`<title>${statusIconDescription}</title>`,\n        });\n  }\n\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  @property({ attribute: 'aria-label' })\n  ariaLabel!: string;\n\n  /**\n   * `true` to hide the close button.\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'hide-close-button' })\n  hideCloseButton = false;\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  @property({ attribute: 'status-icon-description' })\n  statusIconDescription!: string;\n\n  /**\n   * Notification kind.\n   */\n  @property({ reflect: true })\n  kind = NOTIFICATION_KIND.SUCCESS;\n\n  /**\n   * Low contrast mode\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'low-contrast' })\n  lowContrast = false;\n\n  /**\n   * `true` if the notification should be open.\n   */\n  @property({ type: Boolean, reflect: true })\n  open = true;\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  @property({ type: Number, reflect: true })\n  timeout: number | null = null;\n\n  /**\n   * The subtitle.\n   */\n  @property()\n  subtitle = '';\n\n  /**\n   * The title.\n   */\n  @property()\n  title = '';\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'alert');\n    }\n    super.connectedCallback();\n  }\n\n  updated(changedProperties) {\n    const openChanged = changedProperties.has('open');\n    const timeoutChanged = changedProperties.has('timeout');\n\n    if (openChanged || timeoutChanged) {\n      if (this.open && this.timeout) {\n        this._initializeTimeout(this.timeout);\n      } else if (!this.open && this._timeoutID) {\n        this._cancelTimeout(this._timeoutID);\n      }\n    }\n  }\n\n  render() {\n    const { _type: type } = this;\n    return html`\n      <div class=\"${prefix}--${type}-notification__details\">\n        ${this._renderIcon()}${this._renderText()}\n      </div>\n      ${this._renderButton()}\n    `;\n  }\n\n  /**\n   * The name of the custom event fired before this notification is being closed upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of closing this notification.\n   */\n  static get eventBeforeClose() {\n    return `${prefix}-notification-beingclosed`;\n  }\n\n  /**\n   * The name of the custom event fired after this notification is closed upon a user gesture.\n   */\n  static get eventClose() {\n    return `${prefix}-notification-closed`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSInlineNotification;\n"],"names":["customElement"],"mappings":"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"}