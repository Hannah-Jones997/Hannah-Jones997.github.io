{"version":3,"file":"structured-list.js","sources":["../../../src/components/structured-list/structured-list.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport { forEach } from '../../globals/internal/collection-helpers';\nimport FocusMixin from '../../globals/mixins/focus';\nimport CDSStructuredListRow from './structured-list-row';\nimport styles from './structured-list.scss?lit';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Structured list wrapper.\n *\n * @element cds-custom-structured-list\n */\n@customElement(`${prefix}-structured-list`)\nclass CDSStructuredList extends FocusMixin(LitElement) {\n  /**\n   * The `name` attribute for the `<input>` for selection.\n   * If present, this structured list will be a selectable one.\n   */\n  @property({ attribute: 'selection-name' })\n  selectionName = '';\n\n  /**\n   * Specify if structured list is condensed, default is false\n   */\n  @property({ type: Boolean, reflect: true })\n  condensed = false;\n\n  /**\n   * Specify if structured list is flush, default is false\n   */\n  @property({ type: Boolean, reflect: true })\n  flush = false;\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'table');\n    }\n    super.connectedCallback();\n  }\n\n  shouldUpdate(changedProperties) {\n    if (changedProperties.has('selectionName')) {\n      // Propagate `selectionName` attribute to descendants until `:host-context()` gets supported in all major browsers\n      forEach(\n        this.querySelectorAll(\n          (this.constructor as typeof CDSStructuredList).selectorRowsWithHeader\n        ),\n        (elem) => {\n          (elem as CDSStructuredListRow).selectionName = this.selectionName;\n        }\n      );\n    }\n    return true;\n  }\n\n  updated(changedProperties) {\n    const attributes = ['condensed', 'flush'];\n    attributes.forEach((attr) => {\n      if (changedProperties.has(attr)) {\n        // Propagate watched attribute to descendants until `:host-context()` gets supported in all major browsers\n        forEach(\n          this.querySelectorAll(\n            (this.constructor as typeof CDSStructuredList)\n              .selectorRowsWithHeader\n          ),\n          (elem) => {\n            this[`${attr}`]\n              ? elem.setAttribute(attr, '')\n              : elem.removeAttribute(attr);\n          }\n        );\n      }\n    });\n  }\n\n  render() {\n    const { condensed, flush, selectionName } = this;\n    const classes = classMap({\n      [`${prefix}--structured-list`]: true,\n      [`${prefix}--structured-list--selection`]: Boolean(selectionName),\n      [`${prefix}--structured-list--condensed`]: condensed,\n      [`${prefix}--structured-list--flush`]: flush,\n    });\n    return html`\n      <section id=\"section\" class=${classes}><slot></slot></section>\n    `;\n  }\n\n  /**\n   * The CSS selector to find the rows, including header rows.\n   */\n  static selectorRowsWithHeader = `${prefix}-structured-list-row,${prefix}-structured-list-header-row`;\n  static shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n  static styles = styles;\n}\n\nexport default CDSStructuredList;\n"],"names":["customElement"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;AAKG;AAYH;;;;AAIG;AAEH,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,UAAU,CAAC,UAAU,CAAC,CAAA;AAAtD,IAAA,WAAA,GAAA;;AACE;;;AAGG;QAEH,IAAa,CAAA,aAAA,GAAG,EAAE;AAElB;;AAEG;QAEH,IAAS,CAAA,SAAA,GAAG,KAAK;AAEjB;;AAEG;QAEH,IAAK,CAAA,KAAA,GAAG,KAAK;;IAEb,iBAAiB,GAAA;QACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;AAC9B,YAAA,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;;QAEpC,KAAK,CAAC,iBAAiB,EAAE;;AAG3B,IAAA,YAAY,CAAC,iBAAiB,EAAA;AAC5B,QAAA,IAAI,iBAAiB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;;AAE1C,YAAA,OAAO,CACL,IAAI,CAAC,gBAAgB,CAClB,IAAI,CAAC,WAAwC,CAAC,sBAAsB,CACtE,EACD,CAAC,IAAI,KAAI;AACN,gBAAA,IAA6B,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa;AACnE,aAAC,CACF;;AAEH,QAAA,OAAO,IAAI;;AAGb,IAAA,OAAO,CAAC,iBAAiB,EAAA;AACvB,QAAA,MAAM,UAAU,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC;AACzC,QAAA,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;AAC1B,YAAA,IAAI,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;;AAE/B,gBAAA,OAAO,CACL,IAAI,CAAC,gBAAgB,CAClB,IAAI,CAAC;AACH,qBAAA,sBAAsB,CAC1B,EACD,CAAC,IAAI,KAAI;AACP,oBAAA,IAAI,CAAC,CAAA,EAAG,IAAI,CAAA,CAAE;0BACV,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE;AAC5B,0BAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;AAChC,iBAAC,CACF;;AAEL,SAAC,CAAC;;IAGJ,MAAM,GAAA;QACJ,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,IAAI;QAChD,MAAM,OAAO,GAAG,QAAQ,CAAC;AACvB,YAAA,CAAC,CAAG,EAAA,MAAM,CAAmB,iBAAA,CAAA,GAAG,IAAI;YACpC,CAAC,CAAA,EAAG,MAAM,CAA8B,4BAAA,CAAA,GAAG,OAAO,CAAC,aAAa,CAAC;AACjE,YAAA,CAAC,CAAG,EAAA,MAAM,CAA8B,4BAAA,CAAA,GAAG,SAAS;AACpD,YAAA,CAAC,CAAG,EAAA,MAAM,CAA0B,wBAAA,CAAA,GAAG,KAAK;AAC7C,SAAA,CAAC;AACF,QAAA,OAAO,IAAI,CAAA;oCACqB,OAAO,CAAA;KACtC;;;AAGH;;AAEG;AACI,iBAAA,CAAA,sBAAsB,GAAG,CAAG,EAAA,MAAM,wBAAwB,MAAM,CAAA,2BAAA,CAA6B;AAC7F,iBAAiB,CAAA,iBAAA,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACnB,UAAU,CAAC,iBAAiB,KAC/B,cAAc,EAAE,IAAI,EAAA,CAFE;AAIjB,iBAAM,CAAA,MAAA,GAAG,MAAH;AA7Eb,UAAA,CAAA;AADC,IAAA,QAAQ,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE;AACtB,CAAA,EAAA,iBAAA,CAAA,SAAA,EAAA,eAAA,EAAA,MAAA,CAAA;AAMnB,UAAA,CAAA;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;AACxB,CAAA,EAAA,iBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,MAAA,CAAA;AAMlB,UAAA,CAAA;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;AAC5B,CAAA,EAAA,iBAAA,CAAA,SAAA,EAAA,OAAA,EAAA,MAAA,CAAA;AAlBV,iBAAiB,GAAA,UAAA,CAAA;AADtB,IAAAA,aAAa,CAAC,CAAA,EAAG,MAAM,CAAA,gBAAA,CAAkB;AACpC,CAAA,EAAA,iBAAiB,CAoFtB;AAED,0BAAe,iBAAiB;;;;"}