/**
 * Copyright IBM Corp. 2025, 2025
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * <feature-flags> provides scoped feature flags to child components.
 *
 * Usage:
 * Wrap any child components inside <feature-flags> to provide scoped feature flags like this:
 * <feature-flags enable-dialog-element="true">
 *   <component></component>
 * </feature-flags>
 *
 * Available flags:
 * - enable-dialog-element
 * - enable-treeview-controllable
 * - ... (and others listed in observedAttributes)
 *
 * How to check a Flag in your component:
 *   import { isFeatureFlagEnabled } from './feature-flags';
 *   isFeatureFlagEnabled('enable-dialog-element', this)
 *   Returns true if the flag is enabled in the nearest <feature-flags> ancestor
 */
import { LitElement } from 'lit';
declare class FeatureFlagsElement extends LitElement {
    private scope;
    private flags;
    static get observedAttributes(): string[];
    constructor();
    connectedCallback(): void;
    attributeChangedCallback(name: string, _oldVal: string | null, newVal: string | null): void;
    private getParentScope;
    private updateScope;
    render(): import("lit-html").TemplateResult<1>;
    isFeatureFlagEnabled(flag: string): boolean;
    private getScope;
}
export default FeatureFlagsElement;
export declare function findParentFeatureFlags(el: HTMLElement): FeatureFlagsElement | null;
export declare function isFeatureFlagEnabled(flag: string, context: HTMLElement): boolean;
