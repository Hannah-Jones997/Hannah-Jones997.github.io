{"version":3,"file":"spread.js","sources":["../../../src/globals/directives/spread.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  AttributePart,\n  Directive,\n  DirectiveParameters,\n} from 'lit/directive.js';\nimport { directive } from 'lit/async-directive.js';\n\nexport interface AttributesInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst attributesMapCache = new WeakMap();\n\n/**\n * A directive that applies attributes from a key-value pairs.\n * This must be used in the `...` name and must be the only part used in the attribute.\n * It applies the key-value pairs in the `attributesInfo` argument\n * and sets them as attribute name/value pairs.\n *\n */\nclass SpreadDirective extends Directive {\n  /**\n   * The update function that handles the attribute setting.\n   *\n   * @param part an object with an API to manage the element's DOM\n   * @returns the render function\n   */\n  update(part: AttributePart, [attributesInfo]: DirectiveParameters<this>) {\n    const { element } = part;\n\n    // Removes old attributes that are no longer there\n    const oldAttributesInfo = attributesMapCache.get(part);\n    if (oldAttributesInfo) {\n      Object.keys(oldAttributesInfo).forEach((name) => {\n        if (!(name in attributesInfo)) {\n          element.removeAttribute(name);\n        }\n      });\n    }\n\n    // Adds new attributes\n    Object.keys(attributesInfo).forEach((name) => {\n      const value = attributesInfo[name];\n      if (\n        (!oldAttributesInfo || !Object.is(value, oldAttributesInfo[name])) &&\n        typeof value !== 'undefined'\n      ) {\n        element.setAttribute(name, value);\n      }\n    });\n\n    // Updates the cache\n    attributesMapCache.set(part, attributesInfo);\n\n    return this.render(attributesInfo);\n  }\n\n  /**\n   * The rendering function that simply takes in the arguments to be used\n   * in the update() function.\n   *\n   * @param attributesInfo The key-value pair to be set as the attribute name/value pairs.\n   * @returns the attributes info\n   */\n  render(attributesInfo: AttributesInfo) {\n    return attributesInfo;\n  }\n}\n\nconst spread = directive(SpreadDirective);\n\nexport default spread;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;AAKG;AAaH;;;AAGG;AACH,MAAM,kBAAkB,GAAG,IAAI,OAAO,EAAE;AAExC;;;;;;AAMG;AACH,MAAM,eAAgB,SAAQ,SAAS,CAAA;AACrC;;;;;AAKG;AACH,IAAA,MAAM,CAAC,IAAmB,EAAE,CAAC,cAAc,CAA4B,EAAA;AACrE,QAAA,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI;;QAGxB,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC;QACtD,IAAI,iBAAiB,EAAE;YACrB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;AAC9C,gBAAA,IAAI,EAAE,IAAI,IAAI,cAAc,CAAC,EAAE;AAC7B,oBAAA,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC;;AAEjC,aAAC,CAAC;;;QAIJ,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;AAC3C,YAAA,MAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC;AAClC,YAAA,IACE,CAAC,CAAC,iBAAiB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACjE,gBAAA,OAAO,KAAK,KAAK,WAAW,EAC5B;AACA,gBAAA,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC;;AAErC,SAAC,CAAC;;AAGF,QAAA,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC;AAE5C,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;;AAGpC;;;;;;AAMG;AACH,IAAA,MAAM,CAAC,cAA8B,EAAA;AACnC,QAAA,OAAO,cAAc;;AAExB;AAED,MAAM,MAAM,GAAG,SAAS,CAAC,eAAe;;;;"}