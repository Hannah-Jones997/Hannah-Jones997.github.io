{"version":3,"file":"radio-group-manager.js","sources":["../../../src/globals/internal/radio-group-manager.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * The navigation direction.\n */\nexport enum NAVIGATION_DIRECTION {\n  /**\n   * Navigating backward.\n   */\n  BACKWARD = -1,\n\n  /**\n   * Navigating forward.\n   */\n  FORWARD = 1,\n}\n\nexport interface ManagedRadioButtonDelegate {\n  /**\n   * `true` if this radio button is selected.\n   */\n  checked: boolean;\n\n  /**\n   * The tab index.\n   */\n  tabIndex: number;\n\n  /**\n   * The name of the radio group.\n   */\n  name: string;\n\n  /**\n   * @param other A node to compare this radio button's DOM position in document with.\n   * @returns\n   *   An integer value, the same format as `Node.compareDocumentPosition` does,\n   *   whose bits represent the calling this radio button's relationship to the given node within the document.\n   */\n  compareDocumentPosition(other: ManagedRadioButtonDelegate): number;\n\n  /**\n   * Focuses on the radio button.\n   */\n  focus(): void;\n}\n\ntype ManagedRadioButton = HTMLInputElement | ManagedRadioButtonDelegate;\n\n/**\n * An object that manages radio groups in a document.\n * There must be only one instance for one document.\n */\nclass RadioGroupManager {\n  /**\n   * Radio groups, keyed by their names.\n   */\n  private _groups: { [name: string]: Set<ManagedRadioButton> } = {};\n\n  private constructor(document: Document) {\n    (this.constructor as typeof RadioGroupManager)._instances.set(\n      document,\n      this\n    );\n  }\n\n  /**\n   * @param radio A radio button.\n   * @returns\n   *   `true` if the given radio button should be focusable, which is either:\n   *   - The radio button is selected\n   *   - No radio button is selected and the radio button is first one in the radio group\n   */\n  shouldBeFocusable(radio: ManagedRadioButton) {\n    if (radio.checked) {\n      return true;\n    }\n    const { name } = radio;\n    const group = this._groups[name];\n    const hasSelectedItemInGroup =\n      group && Array.from(group).some((item) => item.checked);\n    if (hasSelectedItemInGroup) {\n      return false;\n    }\n    const isFirstInGroup =\n      !group || group.size === 1 || this.getSortedGroup(radio)[0] === radio;\n    return isFirstInGroup;\n  }\n\n  /**\n   * @param radio A radio button.\n   * @returns The sorted radio group the given radio button is in.\n   */\n  getSortedGroup(radio: ManagedRadioButton) {\n    const group = this._groups[radio.name];\n    return (\n      group &&\n      Array.from(group).sort((lhs, rhs) => {\n        const comparisonResult = (\n          lhs as ManagedRadioButtonDelegate\n        ).compareDocumentPosition(rhs as ManagedRadioButtonDelegate);\n        // eslint-disable-next-line no-bitwise\n        if (\n          comparisonResult & Node.DOCUMENT_POSITION_FOLLOWING ||\n          comparisonResult & Node.DOCUMENT_POSITION_CONTAINED_BY\n        ) {\n          return -1;\n        }\n        // eslint-disable-next-line no-bitwise\n        if (\n          comparisonResult & Node.DOCUMENT_POSITION_PRECEDING ||\n          comparisonResult & Node.DOCUMENT_POSITION_CONTAINS\n        ) {\n          return 1;\n        }\n        return 0;\n      })\n    );\n  }\n\n  /**\n   * Manages a radio button.\n   *\n   * @param radio The radio button to manage.\n   * @returns This object.\n   */\n  add(radio: ManagedRadioButton) {\n    const { name } = radio;\n    if (name) {\n      const groups = this._groups;\n      if (!groups[name]) {\n        groups[name] = new Set<ManagedRadioButton>();\n      }\n      groups[name].add(radio);\n    }\n    return this;\n  }\n\n  /**\n   * Unmanages a radio button.\n   *\n   * @param radio The radio button to unmanage.\n   * @param name The old name of the radio button to unmanage.\n   * @returns `true` if `element` was actually managed.\n   */\n  delete(radio: ManagedRadioButton, name: string = radio.name) {\n    const group = this._groups[name];\n    return !group ? false : group.delete(radio);\n  }\n\n  /**\n   * Selects or focuses on a radio button.\n   *\n   * @param radio The radio button to select.\n   * @param readOnly optional if radio button has readOnly.\n   */\n  select(radio: ManagedRadioButton, readOnly?: boolean) {\n    const group = this._groups[radio.name];\n    if (group) {\n      // Updates the state of the one being selected up-front to avoid the state of no radio button is selected\n      radio.checked = !readOnly || true;\n      radio.tabIndex = 0;\n      radio.focus();\n      group.forEach((item) => {\n        if (radio !== item) {\n          item.checked = readOnly || false;\n          item.tabIndex = -1;\n        }\n      });\n    }\n  }\n\n  /**\n   * @param radio The currently selected radio button.\n   * @param direction The direction to navigate to.\n   * @returns The radio button that should be selected next.\n   */\n  navigate(radio: ManagedRadioButton, direction: NAVIGATION_DIRECTION) {\n    const sortedGroup = this.getSortedGroup(radio);\n    let newIndex = sortedGroup.indexOf(radio) + direction;\n    if (newIndex < 0) {\n      newIndex = sortedGroup.length - 1;\n    } else if (newIndex >= sortedGroup.length) {\n      newIndex = 0;\n    }\n    return sortedGroup[newIndex];\n  }\n\n  /**\n   * `RadioGroupManager` instances associated with documents.\n   */\n  private static _instances = new WeakMap();\n\n  /**\n   * @param document A document element.\n   * @returns The `RadioGroupManager` instance associated with the given document.\n   */\n  static get(document: Document) {\n    const found = this._instances.get(document);\n    return found || new RadioGroupManager(document);\n  }\n}\n\nexport default RadioGroupManager;\n"],"names":[],"mappings":"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"}