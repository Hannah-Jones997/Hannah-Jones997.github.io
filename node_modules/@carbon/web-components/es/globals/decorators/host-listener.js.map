{"version":3,"file":"host-listener.js","sources":["../../../src/globals/decorators/host-listener.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Puts an event listener to an internal table for `@HostListener()`.\n *\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n * @param Clazz The target class.\n * @param name The method name in the given target class that works as the event listener.\n */\nconst setHostListener = (\n  type: string,\n  options: boolean | AddEventListenerOptions,\n  Clazz,\n  name: string\n) => {\n  const hostListeners = Clazz._hostListeners;\n  if (!hostListeners) {\n    throw new Error(\n      'The method `@HostListener()` is defined on has to be of a class that has `HostListerMixin`.'\n    );\n  }\n  if (!hostListeners[name]) {\n    hostListeners[name] = {};\n  }\n  hostListeners[name][type] = { options };\n};\n\n/**\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n * @param descriptor The original class element descriptor of the event listener method.\n * @returns The updated class element descriptor with `@HostListener()` decorator.\n */\nconst HostListenerStandard = (\n  type: string,\n  options: boolean | AddEventListenerOptions,\n  descriptor\n) => {\n  const { kind, key, placement } = descriptor;\n  if (\n    !(\n      (kind === 'method' && placement === 'prototype') ||\n      (kind === 'field' && placement === 'own')\n    )\n  ) {\n    throw new Error(\n      '`@HostListener()` must be defined on instance methods, but you may have defined it on static, field, etc.'\n    );\n  }\n  return {\n    ...descriptor,\n    finisher(Clazz) {\n      setHostListener(type, options, Clazz, key);\n    },\n  };\n};\n\n/**\n * A decorator to add event listener to the host element, or its `document`/`window`, of a custom element.\n * The `target` must extend `HostListenerMixin`.\n *\n * @param type\n *   The event type. Can be prefixed with `document:` or `window:`.\n *   The event listener is attached to host element's owner document or its default view in such case.\n * @param options The event listener options.\n */\nconst HostListener =\n  (type: string, options?: boolean | AddEventListenerOptions) =>\n  (targetOrDescriptor, name: string) =>\n    typeof name !== 'undefined'\n      ? setHostListener(type, options!, targetOrDescriptor.constructor, name)\n      : HostListenerStandard(type, options!, targetOrDescriptor);\n\nexport default HostListener;\n"],"names":[],"mappings":";;;;;;;AAAA;;;;;AAKG;AAEH;;;;;;;;;AASG;AACH,MAAM,eAAe,GAAG,CACtB,IAAY,EACZ,OAA0C,EAC1C,KAAK,EACL,IAAY,KACV;AACF,IAAA,MAAM,aAAa,GAAG,KAAK,CAAC,cAAc;IAC1C,IAAI,CAAC,aAAa,EAAE;AAClB,QAAA,MAAM,IAAI,KAAK,CACb,6FAA6F,CAC9F;;AAEH,IAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;AACxB,QAAA,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE;;IAE1B,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE;AACzC,CAAC;AAED;;;;;;;AAOG;AACH,MAAM,oBAAoB,GAAG,CAC3B,IAAY,EACZ,OAA0C,EAC1C,UAAU,KACR;IACF,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,UAAU;IAC3C,IACE,EACE,CAAC,IAAI,KAAK,QAAQ,IAAI,SAAS,KAAK,WAAW;SAC9C,IAAI,KAAK,OAAO,IAAI,SAAS,KAAK,KAAK,CAAC,CAC1C,EACD;AACA,QAAA,MAAM,IAAI,KAAK,CACb,2GAA2G,CAC5G;;AAEH,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,UAAU,CAAA,EAAA,EACb,QAAQ,CAAC,KAAK,EAAA;YACZ,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC;AAC5C,SAAC,EACD,CAAA;AACJ,CAAC;AAED;;;;;;;;AAQG;AACH,MAAM,YAAY,GAChB,CAAC,IAAY,EAAE,OAA2C,KAC1D,CAAC,kBAAkB,EAAE,IAAY,KAC/B,OAAO,IAAI,KAAK;AACd,MAAE,eAAe,CAAC,IAAI,EAAE,OAAQ,EAAE,kBAAkB,CAAC,WAAW,EAAE,IAAI;MACpE,oBAAoB,CAAC,IAAI,EAAE,OAAQ,EAAE,kBAAkB;;;;"}