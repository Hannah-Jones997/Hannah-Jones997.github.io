{"version":3,"file":"textarea.js","sources":["../../../src/components/textarea/textarea.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport WarningFilled16 from '@carbon/icons/lib/warning--filled/16.js';\nimport WarningAltFilled16 from '@carbon/icons/lib/warning--alt--filled/16.js';\nimport { prefix } from '../../globals/settings';\nimport ifNonEmpty from '../../globals/directives/if-non-empty';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport CDSTextInput from '../text-input/text-input';\nimport styles from './textarea.scss?lit';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Text area.\n *\n * @element cds-textarea\n * @slot helper-text - The helper text.\n * @slot label-text - The label text.\n * @slot validity-message - The validity message. If present and non-empty, this input shows the UI of its invalid state.\n */\n@customElement(`${prefix}-textarea`)\nclass CDSTextarea extends CDSTextInput {\n  /**\n   * Manually handles maxCount for counterMode = 'word'\n   * @param event The keyboard event.\n   */\n  protected _onKeyDown(evt: KeyboardEvent) {\n    if (!this.disabled && this.enableCounter && this.counterMode === 'word') {\n      const currentWordCount = this.value?.match(/\\p{L}+/gu)?.length || 0;\n      if (\n        (this.maxCount &&\n          currentWordCount >= this.maxCount &&\n          evt.key === ' ') ||\n        (this.maxCount &&\n          currentWordCount >= this.maxCount &&\n          evt.key === 'Enter')\n      ) {\n        evt.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Handles `onPaste` event on the `<input>`.\n   * Manually handles maxCount for counterMode = 'word' when\n   * the user is pasting text\n   *\n   * @param event The clipboard event.\n   */\n  protected _onPaste(evt: ClipboardEvent) {\n    if (\n      this.counterMode === 'word' &&\n      this.enableCounter &&\n      typeof this.maxCount !== 'undefined'\n    ) {\n      const existingWords: string[] =\n        this._textarea.value.match(/\\p{L}+/gu) || [];\n      const pastedWords: string[] =\n        evt.clipboardData?.getData('Text').match(/\\p{L}+/gu) || [];\n\n      const totalWords = existingWords.length + pastedWords.length;\n\n      if (totalWords > this.maxCount) {\n        evt.preventDefault();\n\n        const allowedWords = existingWords\n          .concat(pastedWords)\n          .slice(0, this.maxCount);\n\n        this._textarea.value = allowedWords.join(' ');\n        this._textarea.dispatchEvent(\n          new InputEvent('input', {\n            inputType: 'insertFromPaste',\n            data: allowedWords.join(' '),\n            bubbles: true,\n          })\n        );\n      }\n    }\n  }\n  /**\n   * Handles `oninput` event on the `<input>`.\n   *\n   * @param event The event.\n   * @param event.target The event target.\n   */\n  protected _handleInput({ target }: Event) {\n    this.value = (target as HTMLTextAreaElement).value;\n  }\n\n  /**\n   * The number of columns for the textarea to show by default\n   */\n  @property({ type: Number })\n  cols;\n\n  /**\n   * Specify the method used for calculating the counter number\n   */\n  @property({\n    type: String,\n    reflect: true,\n    hasChanged(newVal: string, oldVal: string) {\n      if ((newVal === 'character' || newVal === 'word') && newVal !== oldVal) {\n        return true;\n      }\n      return false;\n    },\n    attribute: 'counter-mode',\n  })\n  counterMode: 'character' | 'word' = 'character';\n\n  /**\n   * ID to link the `label` and `textarea`\n   */\n  @property()\n  id = '';\n\n  /**\n   * Pattern to validate the textarea against for HTML validity checking\n   */\n  @property()\n  pattern = '';\n\n  /**\n   * Boolean property to set the required status\n   */\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  /**\n   * The number of rows for the textarea to show by default\n   */\n  @property()\n  rows = 4;\n\n  /**\n   * Get a reference to the underlying textarea so we can directly apply values.\n   * This lets us fixe a bug where after a user would clear text, the value wouldn't update programmatically\n   */\n  @query('textarea')\n  protected _textarea!: HTMLTextAreaElement;\n\n  /**\n   * The previous counterMode selected. This lets the counterMode state update\n   * when the user toggles between both modes.\n   */\n  private _prevCounterMode: 'character' | 'word' = this.counterMode;\n\n  render() {\n    const { enableCounter, maxCount } = this;\n\n    const textCount = this.value?.length ?? 0;\n    const wordCount = this.value?.match(/\\p{L}+/gu)?.length || 0;\n\n    const invalidIcon = WarningFilled16({\n      class: `${prefix}--text-area__invalid-icon`,\n    });\n\n    const warnIcon = WarningAltFilled16({\n      class: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`,\n    });\n\n    const textareaClasses = classMap({\n      [`${prefix}--text-area`]: true,\n      [`${prefix}--text-area--warn`]: this.warn,\n      [`${prefix}--text-area--invalid`]: this.invalid,\n      [`${prefix}--text-area__wrapper--decorator`]: this._hasAILabel,\n    });\n\n    const textareaWrapperClasses = classMap({\n      [`${prefix}--text-area__wrapper`]: true,\n      [`${prefix}--text-area__wrapper--cols`]: this.cols,\n      [`${prefix}--text-area__wrapper--warn`]: this.warn,\n      [`${prefix}--text-area__wrapper--readonly`]: this.readonly,\n    });\n\n    const labelClasses = classMap({\n      [`${prefix}--label`]: true,\n      [`${prefix}--visually-hidden`]: this.hideLabel,\n      [`${prefix}--label--disabled`]: this.disabled,\n    });\n\n    const counterClasses = classMap({\n      [`${prefix}--label`]: true,\n      [`${prefix}--label--disabled`]: this.disabled,\n    });\n\n    const helperTextClasses = classMap({\n      [`${prefix}--form__helper-text`]: true,\n      [`${prefix}--form__helper-text--disabled`]: this.disabled,\n    });\n\n    const counter =\n      enableCounter && maxCount\n        ? html` <label class=\"${counterClasses}\">\n            <slot name=\"label-text\"\n              >${this.counterMode === 'word'\n                ? wordCount\n                : textCount}/${maxCount}</slot\n            >\n          </label>`\n        : null;\n\n    const icon = () => {\n      if (this.invalid) {\n        return invalidIcon;\n      } else if (this.warn && !this.invalid) {\n        return warnIcon;\n      }\n      return null;\n    };\n\n    return html`\n      <div class=\"${prefix}--text-area__label-wrapper\">\n        <label class=\"${labelClasses}\" for=\"input\">\n          <slot name=\"label-text\"> ${this.label} </slot>\n        </label>\n        ${counter}\n      </div>\n      <div class=\"${textareaWrapperClasses}\" ?data-invalid=\"${this.invalid}\">\n        ${icon()}\n        <textarea\n          autocomplete=\"${this.autocomplete}\"\n          ?autofocus=\"${this.autofocus}\"\n          class=\"${textareaClasses}\"\n          cols=\"${ifDefined(this.cols)}\"\n          ?data-invalid=\"${this.invalid}\"\n          ?disabled=\"${this.disabled}\"\n          id=\"input\"\n          name=\"${ifNonEmpty(this.name)}\"\n          pattern=\"${ifNonEmpty(this.pattern)}\"\n          placeholder=\"${ifNonEmpty(this.placeholder)}\"\n          ?readonly=\"${this.readonly}\"\n          ?required=\"${this.required}\"\n          rows=\"${ifDefined(this.rows)}\"\n          .value=\"${this.value}\"\n          maxlength=\"${this.counterMode === 'character'\n            ? ifNonEmpty(this.maxCount)\n            : ''}\"\n          @keydown=\"${this._onKeyDown}\"\n          @paste=\"${this._onPaste}\"\n          @input=\"${this._handleInput}\"></textarea>\n        <slot name=\"ai-label\" @slotchange=\"${this._handleSlotChange}\"></slot>\n        <slot name=\"slug\" @slotchange=\"${this._handleSlotChange}\"></slot>\n      </div>\n      <div class=\"${helperTextClasses}\" ?hidden=\"${this.invalid || this.warn}\">\n        <slot name=\"helper-text\"> ${this.helperText} </slot>\n      </div>\n      <div\n        class=\"${prefix}--form-requirement\"\n        ?hidden=\"${!this.invalid && !this.warn}\">\n        <slot name=\"${this.invalid ? 'invalid-text' : 'warn-text'}\">\n          ${this.invalid ? this.invalidText : this.warnText}\n        </slot>\n      </div>\n    `;\n  }\n  updated(): void {\n    super.updated?.();\n    if (this.counterMode !== this._prevCounterMode) {\n      const textarea = this._textarea;\n      if (textarea) {\n        if (this.counterMode === 'character') {\n          textarea.setAttribute('maxlength', String(this.maxCount));\n        } else {\n          textarea.removeAttribute('maxlength');\n        }\n      }\n      this._prevCounterMode = this.counterMode;\n    }\n  }\n\n  static shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n  static styles = styles;\n}\n\nexport default CDSTextarea;\n"],"names":["customElement"],"mappings":"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"}