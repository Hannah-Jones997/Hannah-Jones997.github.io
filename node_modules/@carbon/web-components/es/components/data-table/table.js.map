{"version":3,"file":"table.js","sources":["../../../src/components/data-table/table.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport { forEach } from '../../globals/internal/collection-helpers';\nimport { TABLE_SIZE, TABLE_SORT_DIRECTION } from './defs';\nimport styles from './data-table.scss?lit';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport {\n  CDSRadioButton,\n  CDSTableBatchActions,\n  CDSTableCell,\n  CDSTableHeaderCell,\n  CDSTableHeaderRow,\n  CDSTableRow,\n  CDSTableToolbarSearch,\n} from '../..';\nimport CDSTableExpandedRow from './table-expanded-row';\n\nexport { TABLE_SIZE };\n\n/**\n * Data table.\n *\n * @element cds-table\n * @fires cds-table-header-cell-sort\n *   The name of the custom event fired before a new sort direction is set upon a user gesture.\n *   Cancellation of this event stops the user-initiated change in sort direction.\n * @fires cds-search input\n *   The name of the custom event fired during search bar input\n * @fires cds-table-change-selection-all\n *   The name of the custom event fired before header row is selected/unselected upon a user gesture.\n * @fires cds-table-row-change-selection\n *   The name of the custom event fired before a row is selected/unselected upon a user gesture.\n * @fires cds-table-batch-actions-cancel-clicked\n *   The name of the custom event fired after the Cancel button is clicked.\n * @fires cds-table-row-expando-toggled\n *   The name of the custom event fired after the expanded state of a row is toggled upon a user gesture.\n * @fires cds-table-row-selected\n *   The name of the custom event fired after a row has been selected.\n * @fires cds-table-row-all-selected\n *   The name of the custom event fired after all rows have been selected.\n * @fires cds-table-sorted\n *   The name of the custom event fired after the table has been sorted.\n * @fires cds-table-filtered\n *   The name of the custom event fired after the table has been filtered containing remaining rows.\n */\n@customElement(`${prefix}-table`)\nclass CDSTable extends HostListenerMixin(LitElement) {\n  /**\n   * The map of how sorting direction affects sorting order.\n   */\n  private collationFactors = {\n    [TABLE_SORT_DIRECTION.ASCENDING]: 1,\n    [TABLE_SORT_DIRECTION.DESCENDING]: -1,\n  };\n\n  /**\n   * Reference to download button\n   */\n  @state()\n  private _downloadButton;\n\n  /**\n   * Current search value for filtering\n   */\n  @state()\n  private _searchValue = '';\n\n  /**\n   * Table header row within component\n   */\n  @state()\n  private _tableHeaderRow;\n\n  /**\n   * Table body\n   */\n  @state()\n  private _tableBody;\n\n  /**\n   * Table expanded row within component\n   */\n  @state()\n  private _tableExpandedRows;\n\n  /**\n   * Table rows within component\n   */\n  @state()\n  private _tableRows;\n\n  /**\n   * Reference to the component containing batch actions\n   */\n  @state()\n  private _tableBatchActions;\n\n  /**\n   * Reference to the table toolbar\n   */\n  @state()\n  private _tableToolbar;\n\n  /**\n   * Reference to the table toolbar content\n   */\n  @state()\n  private _tableToolbarContent;\n\n  @state()\n  private _selectedRows: CDSTableRow[] = [];\n\n  /**\n   * `true` if this table should support batch expansion\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'batch-expansion' })\n  batchExpansion = false;\n\n  /**\n   * The g11n collator to use.\n   */\n  @property({ attribute: false })\n  collator;\n\n  /**\n   * @param lhs A value.\n   * @param rhs Another value.\n   * @param collator A custom collator.\n   * @returns\n   *   `0` if the given two values are equal\n   *   A negative value to sort `lhs` to an index lower than `rhs`\n   *   A positive value to sort `rhs` to an index lower than `lhs`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  customSortRow(lhs, rhs, collator) {\n    if (typeof lhs === 'number' && typeof rhs === 'number') {\n      return lhs - rhs;\n    }\n    return collator.compare(lhs, rhs);\n  }\n\n  /**\n   * Specify whether the rows should be able to be expandable\n   */\n  @property({ type: Boolean, reflect: true })\n  expandable = false;\n\n  /**\n   * The method used when filtering the table with the search bar.\n   * Can be replaced with custom method.\n   *\n   * @param rowText A table row.\n   * @param searchString A search string.\n   * @returns `false` if the given table row matches the given search string.\n   */\n  @property()\n  filterRows = (rowText: string, searchString: string) =>\n    rowText.toLowerCase().indexOf(searchString.toLowerCase()) < 0;\n\n  /**\n   * The total headers\n   */\n  @property()\n  headerCount = 0;\n\n  /**\n   * `true` if this table contains selectable rows\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'is-selectable' })\n  isSelectable = false;\n\n  /**\n   * `true` if this table should support sorting.\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'is-sortable' })\n  isSortable = false;\n\n  /**\n   * The table size.\n   */\n  @property({ reflect: true })\n  locale = 'en';\n\n  /**\n   * Specify whether the overflow menu (if it exists) should be shown always, or only on hover\n   */\n  @property({\n    type: Boolean,\n    reflect: true,\n    attribute: 'overflow-menu-on-hover',\n  })\n  overflowMenuOnHover = false;\n\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  @property({ type: Boolean, reflect: true })\n  radio = false;\n\n  /**\n   * The table size.\n   */\n  @property({ reflect: true })\n  size = TABLE_SIZE.LG;\n\n  /**\n   * TODO: Uncomment when Carbon fully implements sticky header\n   * Specify whether the header should be sticky.\n   * Still experimental: may not work with every combination of table props\n   */\n  // @property({ type: Boolean, attribute: 'sticky-header', reflect: true })\n  // stickyHeader = false;\n\n  /**\n   *  If true, will use a width of 'auto' instead of 100%\n   */\n  @property({ type: Boolean, attribute: 'use-static-width', reflect: true })\n  useStaticWidth = false;\n\n  /**\n   *  true to add useZebraStyles striping.\n   */\n  @property({ type: Boolean, attribute: 'use-zebra-styles', reflect: true })\n  useZebraStyles = false;\n\n  @property({ type: Boolean, attribute: 'with-header', reflect: true })\n  withHeader;\n\n  /**\n   *  true if AI Labels are added in the rows\n   */\n  @property({ type: Boolean, attribute: 'with-row-ai-labels' })\n  withRowAILabels = false;\n\n  /**\n   *  true if slugs are added in the rows\n   *\n   * @deprecated remove in v12, use `with-row-ai-labels` instead\n   */\n  @property({ type: Boolean, attribute: 'with-row-slugs' })\n  withRowSlugs = false;\n\n  private _handleSlotChange({ target }: Event) {\n    const hasContent = (target as HTMLSlotElement)\n      .assignedNodes()\n      .some(\n        (node) => node.nodeType !== Node.TEXT_NODE || node!.textContent!.trim()\n      );\n    this.withHeader = hasContent;\n  }\n\n  private _handleTableBodyChange() {\n    // cds-table-head or cds-table-body may have changed\n    this._tableBody = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorTableBody\n    );\n    this._tableExpandedRows = this.querySelectorAll(\n      (this.constructor as typeof CDSTable).selectorTableExpandedRows\n    );\n    this._tableRows = this.querySelectorAll(\n      (this.constructor as typeof CDSTable).selectorTableRow\n    );\n\n    // update any row dependant features\n    this.updateExpandable();\n  }\n\n  private _handleSortAction(columnIndex, sortDirection) {\n    const rows = [...this._tableRows];\n\n    // regular row sorting\n    rows.sort((a, b) => {\n      const cellA = a.querySelectorAll(\n        (this.constructor as typeof CDSTable).selectorTableRowCells\n      )[columnIndex].textContent;\n      const cellB = b.querySelectorAll(\n        (this.constructor as typeof CDSTable).selectorTableRowCells\n      )[columnIndex].textContent;\n      return (\n        this.collationFactors[sortDirection] *\n        this.customSortRow(cellA, cellB, this.collator)\n      );\n    });\n\n    // take into account the expanded rows, mapping each expandable row to its original for proper reinsertion\n    if (this.expandable) {\n      const originalRows = [...this._tableRows];\n      const expandedRows = [...this._tableExpandedRows];\n\n      const mapping = originalRows.reduce((acc, element, index) => {\n        const sortId = element.getAttribute('sort-id');\n        acc[sortId] = expandedRows[index];\n        return acc;\n      }, {});\n\n      const sortedWithExpanded = [] as any;\n\n      rows.forEach((e) => {\n        const sortId = e.getAttribute('sort-id');\n        sortedWithExpanded.push(e);\n        sortedWithExpanded.push(mapping[sortId]);\n      });\n\n      sortedWithExpanded.forEach((e) => {\n        this._tableBody.insertBefore(e, null);\n      });\n    } else {\n      rows.forEach((e) => {\n        this._tableBody.insertBefore(e, null);\n      });\n    }\n  }\n\n  private _handleFilterRows() {\n    const unfilteredRows = [] as any;\n    forEach(this._tableRows, (elem) => {\n      let rowText = elem.textContent?.trim();\n      let filtered = this.filterRows(rowText as string, this._searchValue);\n      (elem as any).filtered = filtered;\n\n      if (filtered && this.expandable) {\n        rowText = (elem as any).nextElementSibling.textContent?.trim();\n        filtered = this.filterRows(rowText as string, this._searchValue);\n        (elem as any).filtered = filtered;\n      }\n\n      if (!filtered) {\n        unfilteredRows.push(elem);\n      }\n\n      if (this.expandable) {\n        (elem as any).nextElementSibling.filtered = filtered;\n      }\n    });\n\n    const init = {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: {\n        unfilteredRows,\n      },\n    };\n    this.dispatchEvent(\n      new CustomEvent(\n        (this.constructor as typeof CDSTable).eventTableFiltered,\n        init\n      )\n    );\n  }\n\n  /**\n   * Download manager for selected rows.\n   */\n  private _handleDownload({ target }) {\n    const data = [] as any;\n\n    const elementsToArray = (elements) =>\n      Array.from(elements, (element) => (element as any).textContent);\n\n    const headerCells = this.querySelectorAll(\n      (this.constructor as typeof CDSTable).selectorHeaderCell\n    );\n    const rows = this._selectedRows;\n    const headerTitleArray = elementsToArray(headerCells);\n\n    rows.forEach((row) => {\n      const rowData = {};\n      const cells = elementsToArray(\n        row.querySelectorAll(\n          (this.constructor as typeof CDSTable).selectorTableRowCells\n        )\n      );\n\n      cells.forEach((cellText, index) => {\n        const headerTitle = headerTitleArray[index];\n        rowData[headerTitle] = cellText;\n      });\n\n      data.push(rowData);\n    });\n\n    const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });\n\n    target.href = URL.createObjectURL(blob);\n  }\n\n  /**\n   * Handles batch expansion\n   */\n  @HostListener('eventExpandoToggle')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleBatchExpansion = async (event: CustomEvent) => {\n    const { detail, target } = event;\n    const { expanded } = detail;\n\n    if ((target as CDSTableHeaderRow) === this._tableHeaderRow) {\n      this._tableRows.forEach((e) => ((e as CDSTableRow).expanded = expanded));\n    }\n  };\n\n  /**\n   * Handles sorting the table depending on the column selected\n   */\n  @HostListener('eventBeforeSort')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleSort = async (event: CustomEvent) => {\n    const { detail, target } = event;\n    const { sortDirection } = detail;\n\n    if (!this.contains(target as any)) {\n      return;\n    }\n\n    const columns = [...this._tableHeaderRow.children];\n    const columnIndex = columns.indexOf(target);\n\n    columns.forEach((e) => {\n      if (e !== target && this.isSortable) {\n        e.setAttribute('sort-direction', 'none');\n      } else if (e.hasAttribute('is-sortable')) {\n        e.setAttribute('sort-direction', 'none');\n      }\n    });\n\n    this._handleSortAction(columnIndex, sortDirection);\n\n    const init = {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: {\n        sortedHeader: columns[columnIndex],\n      },\n    };\n    this.dispatchEvent(\n      new CustomEvent(\n        (this.constructor as typeof CDSTable).eventTableSorted,\n        init\n      )\n    );\n\n    this._handleFilterRows();\n  };\n\n  /**\n   * Handles search input within the toolbar actions\n   */\n  @HostListener('eventSearchInput')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleSearchInput = async (event: CustomEvent) => {\n    const { detail, target } = event;\n\n    if (this.contains(target as CDSTableToolbarSearch)) {\n      const { value } = detail;\n      this._searchValue = value;\n      this._handleFilterRows();\n    }\n  };\n\n  /**\n   * Handles row selection\n   */\n  @HostListener('eventBeforeChangeSelection')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleRowSelect = async (event: CustomEvent) => {\n    const { detail, target } = event;\n    const { selected } = detail;\n    const {\n      _tableBatchActions: tableBatchActions,\n      _tableToolbarContent: tableToolbarContent,\n      _tableHeaderRow: tableHeaderRow,\n      _selectedRows: selectedRows,\n    } = this;\n\n    if (!this.contains(target as CDSTableRow)) {\n      return;\n    }\n\n    if (this.radio) {\n      this._tableRows.forEach((e) => {\n        if (e !== target) {\n          e.removeAttribute('selected');\n          e.shadowRoot!.querySelector(`${prefix}-radio-button`).checked = false;\n        }\n      });\n      this._selectedRows.push(...[target as CDSTableRow]);\n    } else {\n      if (selectedRows.includes(target as CDSTableRow)) {\n        this._selectedRows = selectedRows.filter((e) => e !== target);\n      } else {\n        selectedRows.push(target as CDSTableRow);\n      }\n\n      if (tableBatchActions) {\n        tableBatchActions.active = this._selectedRows?.length;\n        tableBatchActions.selectedRowsCount += selected ? 1 : -1;\n      }\n\n      if (tableToolbarContent) {\n        tableToolbarContent.hasBatchActions = this._selectedRows.length;\n      }\n    }\n\n    const totalRows = [...this._tableRows].filter(\n      (elem) => !elem.hasAttribute('filtered')\n    ).length;\n\n    // selected header checkbox upon all rows being selected\n    const headerCheckbox = tableHeaderRow.shadowRoot\n      ?.querySelector(`${prefix}-checkbox`)\n      .shadowRoot.querySelector(`.${prefix}--checkbox`);\n    const allRowsSelected = this._selectedRows.length === totalRows;\n    headerCheckbox.checked = !this._selectedRows.length ? false : true;\n    headerCheckbox.indeterminate =\n      !allRowsSelected && this._selectedRows.length > 0;\n\n    const init = {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: {\n        selectedRow: target,\n        selectedRows: selectedRows,\n      },\n    };\n    this.dispatchEvent(\n      new CustomEvent(\n        (this.constructor as typeof CDSTable).eventTableRowSelect,\n        init\n      )\n    );\n  };\n\n  /**\n   * Handles header row selection, selecting/unselecting all rows\n   */\n  @HostListener('eventBeforeChangeSelectionAll')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleAllRowsSelect = async (event: CustomEvent) => {\n    const { detail, target } = event;\n    const { selected } = detail;\n    const {\n      _tableBatchActions: tableBatchActions,\n      _tableToolbarContent: tableToolbarContent,\n      _tableRows: tableRows,\n    } = this;\n\n    if (!this.contains(target as CDSTableRow)) {\n      return;\n    }\n\n    let totalRows = 0;\n    forEach(tableRows, (elem) => {\n      if (!(elem as CDSTableRow).filtered) {\n        (elem as CDSTableRow).selected = selected;\n        this.radio\n          ? ((\n              (elem as CDSTableRow).shadowRoot!.querySelector(\n                `${prefix}-radio-button`\n              ) as CDSRadioButton\n            ).checked = selected)\n          : null;\n        this._selectedRows.push(elem as CDSTableRow);\n        totalRows++;\n\n        const { selectorTableExpandedRows } = this\n          .constructor as typeof CDSTable;\n        const { nextElementSibling } = elem;\n\n        // selecting the expanded row as well\n        if (nextElementSibling?.matches(selectorTableExpandedRows)) {\n          (elem.nextElementSibling as CDSTableExpandedRow).selected = selected;\n        }\n      }\n    });\n\n    if (!selected) {\n      this._selectedRows = [];\n    }\n\n    if (tableBatchActions) {\n      tableBatchActions.selectedRowsCount = selected ? totalRows : 0;\n      tableBatchActions.active = selected;\n    }\n\n    if (tableToolbarContent) {\n      tableToolbarContent.hasBatchActions = selected;\n    }\n\n    const init = {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: {\n        selectedRows: this._selectedRows,\n      },\n    };\n    this.dispatchEvent(\n      new CustomEvent(\n        (this.constructor as typeof CDSTable).eventTableRowSelectAll,\n        init\n      )\n    );\n  };\n\n  /**\n   * Handles cancel button within the toolbar actions\n   */\n  @HostListener('eventClickCancel')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleCancelSelection = async (event: CustomEvent) => {\n    const { target } = event;\n    const { _tableHeaderRow: tableHeaderRow } = this;\n\n    if (this.contains(target as CDSTableBatchActions)) {\n      tableHeaderRow.shadowRoot\n        ?.querySelector(`${prefix}-checkbox`)\n        .shadowRoot.querySelector(`.${prefix}--checkbox`)\n        .click();\n    }\n  };\n\n  connectedCallback() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'table');\n    }\n\n    /**\n     * If using `with-row-slugs`, set `with-row-ai-labels` attribute to true so\n     * the styles are applied for slug as well\n     *\n     * remove in v12\n     */\n    if (this.withRowSlugs) {\n      this.setAttribute('with-rows-ai-labels', '');\n      this.withRowAILabels = true;\n    }\n    super.connectedCallback();\n  }\n\n  firstUpdated() {\n    this._tableBatchActions = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorTableBatchActions\n    );\n    this._tableToolbar = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorTableToolbar\n    );\n    this._tableToolbarContent = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorTableToolbarContent\n    );\n    this._tableBody = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorTableBody\n    );\n    this._tableHeaderRow = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorRowsWithHeader\n    );\n    this._tableExpandedRows = this.querySelectorAll(\n      (this.constructor as typeof CDSTable).selectorTableExpandedRows\n    );\n\n    this._tableRows = this.querySelectorAll(\n      (this.constructor as typeof CDSTable).selectorTableRow\n    );\n\n    this._downloadButton = this.querySelector(\n      (this.constructor as typeof CDSTable).selectorToolbarDownload\n    );\n    if (this._downloadButton) {\n      this._downloadButton.onclick = this._handleDownload.bind(this);\n    }\n    this.headerCount = this._tableHeaderRow.children.length;\n  }\n\n  updateExpandable() {\n    this._tableRows.forEach((e, index) => {\n      e.expandable = this.expandable;\n      e.setAttribute('sort-id', index);\n    });\n    this._tableHeaderRow.expandable = this.expandable;\n    this._tableHeaderRow.batchExpansion = this.batchExpansion;\n    this.headerCount += this.expandable ? 1 : -1;\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('expandable')) {\n      this.updateExpandable();\n    }\n\n    if (changedProperties.has('headerCount')) {\n      this._tableExpandedRows.forEach((e) => {\n        e.setAttribute('colspan', this.headerCount);\n      });\n    }\n\n    if (changedProperties.has('isSelectable')) {\n      if (this.isSelectable) {\n        this._tableHeaderRow.setAttribute('selection-name', 'header');\n        this._tableRows.forEach((e, index) => {\n          if (!e.hasAttribute('selection-name')) {\n            e.setAttribute('selection-name', index);\n          }\n        });\n      }\n      this.headerCount++;\n    }\n\n    if (changedProperties.has('locale')) {\n      this.collator = new Intl.Collator(this.locale);\n    }\n    if (changedProperties.has('isSortable')) {\n      if (this.isSortable) {\n        this._enableSortAction();\n      }\n    }\n\n    if (\n      changedProperties.has('overflowMenuOnHover') ||\n      changedProperties.has('size')\n    ) {\n      forEach(\n        this.querySelectorAll(\n          (this.constructor as typeof CDSTable).selectorTableCellOverflowMenu\n        ),\n        (elem) => {\n          const cell = elem.parentNode as CDSTableCell;\n          const row = cell.parentNode as CDSTableRow;\n          cell.overflowMenuOnHover = this.overflowMenuOnHover;\n          row.overflowMenuOnHover = this.overflowMenuOnHover;\n          cell.setAttribute('size', this.size);\n          elem.setAttribute('size', this.size);\n          elem.setAttribute('data-table', '');\n        }\n      );\n    }\n\n    if (changedProperties.has('radio')) {\n      // Propagate `size` attribute to descendants until `:host-context()` gets supported in all major browsers\n      forEach(\n        this.querySelectorAll(\n          (this.constructor as typeof CDSTable).selectorTableRow\n        ),\n        (elem) => {\n          (elem as CDSTableRow).radio = this.radio;\n        }\n      );\n    }\n\n    if (changedProperties.has('size')) {\n      // Propagate `size` attribute to descendants until `:host-context()` gets supported in all major browsers\n      forEach(\n        this.querySelectorAll(\n          (this.constructor as typeof CDSTable).selectorAllRows\n        ),\n        (elem) => {\n          elem.setAttribute('size', this.size);\n        }\n      );\n      this._tableToolbar?.setAttribute('size', this.size);\n    }\n\n    // TODO: Uncomment when Carbon fully implements Sticky header feature\n    // if (changedProperties.has('stickyHeader')) {\n    //   const tableBody = this.querySelector(\n    //     (this.constructor as typeof CDSTable).selectorTableBody\n    //   );\n    //   const tableHead = this.querySelector(\n    //     (this.constructor as typeof CDSTable).selectorTableHead\n    //   );\n    //   (tableBody as any).stickyHeader = this.stickyHeader;\n    //   (tableHead as any).stickyHeader = this.stickyHeader;\n    //   forEach(\n    //     this.querySelectorAll(\n    //       (this.constructor as typeof CDSTable).selectorRowsWithHeader\n    //     ),\n    //     (elem) => {\n    //       (elem as any).stickyHeader = this.stickyHeader;\n    //     }\n    //   );\n    //   forEach(\n    //     this.querySelectorAll(\n    //       (this.constructor as typeof CDSTable).selectorTableCells\n    //     ),\n    //     (elem) => {\n    //       (elem as any).stickyHeader = this.stickyHeader;\n    //     }\n    //   );\n    // }\n\n    if (changedProperties.has('useZebraStyles')) {\n      const tableBody = this.querySelector(\n        (this.constructor as typeof CDSTable).selectorTableBody\n      );\n      (tableBody as any).useZebraStyles = this.useZebraStyles;\n    }\n\n    if (this.withRowAILabels) {\n      this._tableHeaderRow.setAttribute('rows-with-ai-label', '');\n      this._tableRows.forEach((row) => {\n        row.setAttribute('rows-with-ai-label', '');\n      });\n    } else {\n      this._tableHeaderRow.removeAttribute('rows-with-ai-label');\n      this._tableRows.forEach((row) => {\n        row.removeAttribute('rows-with-ai-label');\n      });\n    }\n\n    // Gets table header info to add to the column cells for styles\n    const headersWithAILabel: number[] = [];\n\n    Array.prototype.slice\n      .call(this._tableHeaderRow.children)\n      .forEach((headerCell, index) => {\n        if (\n          headerCell.querySelector(`${prefix}-ai-label`) ||\n          headerCell.querySelector(`${prefix}-slug`)\n        ) {\n          headerCell.setAttribute('ai-label', '');\n          headersWithAILabel.push(index);\n        } else {\n          headerCell.removeAttribute('ai-label');\n        }\n      });\n\n    this._tableRows.forEach((row) => {\n      Array.prototype.slice\n        .call((row as HTMLElement).children)\n        .forEach((cell, index) => {\n          headersWithAILabel.includes(index)\n            ? cell.setAttribute('ai-label-in-header', '')\n            : cell.removeAttribute('ai-label-in-header');\n        });\n    });\n  }\n\n  /* eslint-disable no-constant-condition */\n  render() {\n    return html`\n      <div class=\"${prefix}--data-table-header-container\">\n        <div ?hidden=\"${!this.withHeader}\" class=\"${prefix}--data-table-header\">\n          <slot @slotchange=\"${this._handleSlotChange}\" name=\"title\"></slot>\n          <slot\n            @slotchange=\"${this._handleSlotChange}\"\n            name=\"description\"></slot>\n        </div>\n        <slot name=\"toolbar\"></slot>\n      </div>\n\n      ${false // TODO: replace with this.stickyHeader when feature is fully implemented\n        ? html` <div class=\"${prefix}--data-table_inner-container\">\n            <div class=\"${prefix}--data-table-content\">\n              <slot\n                @cds-table-body-content-change=\"${this\n                  ._handleTableBodyChange}\"></slot>\n            </div>\n          </div>`\n        : html`<slot\n            @cds-table-body-content-change=\"${this\n              ._handleTableBodyChange}\"></slot>`}\n    `;\n  }\n\n  /**\n   * Adds isSortable value for table header cells.\n   */\n  _enableSortAction() {\n    const headerCells = this.querySelectorAll(\n      (this.constructor as typeof CDSTable).selectorHeaderCell\n    );\n    headerCells.forEach((e) => {\n      (e as CDSTableHeaderCell).isSortable = this.isSortable;\n      (e as CDSTableHeaderCell).isSelectable = this.isSelectable;\n      (e as CDSTableHeaderCell).isExpandable = this.expandable;\n    });\n    const columns = [...this._tableHeaderRow.children];\n    let sortDirection;\n    let columnIndex = 0;\n    columns.forEach((column, index) => {\n      if (\n        column.hasAttribute('sort-direction') &&\n        column.getAttribute('sort-direction') !== 'none'\n      ) {\n        sortDirection = column.getAttribute('sort-direction');\n        columnIndex = index;\n      }\n    });\n\n    columns.forEach((e, index) => {\n      if (index !== columnIndex && this.isSortable) {\n        e.setAttribute('sort-direction', 'none');\n      } else if (e.hasAttribute('is-sortable')) {\n        e.setAttribute('sort-direction', 'none');\n      }\n    });\n    this._handleSortAction(columnIndex, sortDirection);\n  }\n\n  /* eslint-enable no-constant-condition */\n\n  /**\n   * The name of the custom event fired before a new sort direction is set upon a user gesture.\n   * Cancellation of this event stops the user-initiated change in sort direction.\n   */\n  static get eventBeforeSort() {\n    return `${prefix}-table-header-cell-sort`;\n  }\n\n  /**\n   * The name of the custom event fired during search bar input\n   */\n  static get eventSearchInput() {\n    return `${prefix}-search-input`;\n  }\n\n  /**\n   * The name of the custom event fired before header row is selected/unselected upon a user gesture.\n   */\n  static get eventBeforeChangeSelectionAll() {\n    return `${prefix}-table-change-selection-all`;\n  }\n\n  /**\n   * The name of the custom event fired before a row is selected/unselected upon a user gesture.\n   */\n  static get eventBeforeChangeSelection() {\n    return `${prefix}-table-row-change-selection`;\n  }\n\n  /**\n   * The name of the custom event fired after the Cancel button is clicked.\n   */\n  static get eventClickCancel() {\n    return `${prefix}-table-batch-actions-cancel-clicked`;\n  }\n\n  /**\n   * The name of the custom event fired after the expanded state a row is toggled upon a user gesture.\n   */\n  static get eventExpandoToggle() {\n    return `${prefix}-table-row-expando-toggled`;\n  }\n\n  /**\n   * The name of the custom event fired after a row has been selected\n   */\n  static get eventTableRowSelect() {\n    return `${prefix}-table-row-selected`;\n  }\n\n  /**\n   * The name of the custom event fired after all rows have been selected\n   */\n  static get eventTableRowSelectAll() {\n    return `${prefix}-table-row-all-selected`;\n  }\n\n  /**\n   * The name of the custom event fired after the table has been sorted\n   */\n  static get eventTableSorted() {\n    return `${prefix}-table-sorted`;\n  }\n\n  /**\n   * The name of the custom event fired after the table has been filtered containing remaining rows.\n   */\n  static get eventTableFiltered() {\n    return `${prefix}-table-filtered`;\n  }\n\n  /**\n   * The CSS selector to find the overflow menu on the table cell\n   */\n  static get selectorTableCellOverflowMenu() {\n    return `${prefix}-table-cell ${prefix}-overflow-menu`;\n  }\n\n  /**\n   * The CSS selector to find the download button\n   */\n  static get selectorToolbarDownload() {\n    return `${prefix}-button[download]`;\n  }\n\n  /**\n   * The CSS selector to find the table batch actions\n   */\n  static get selectorTableBatchActions() {\n    return `${prefix}-table-batch-actions`;\n  }\n\n  /**\n   * The CSS selector to find the table toolbar\n   */\n  static get selectorTableToolbar() {\n    return `${prefix}-table-toolbar`;\n  }\n\n  /**\n   * The CSS selector to find the table toolbar content\n   */\n  static get selectorTableToolbarContent() {\n    return `${prefix}-table-toolbar-content`;\n  }\n\n  /**\n   * The CSS selector to find the table toolbar search\n   */\n  static get selectorTableToolbarSearch() {\n    return `${prefix}-table-toolbar-search`;\n  }\n\n  /**\n   * The CSS selector to find the table head\n   */\n  static get selectorTableHead() {\n    return `${prefix}-table-head`;\n  }\n\n  /**\n   * The CSS selector to find the table body\n   */\n  static get selectorTableBody() {\n    return `${prefix}-table-body`;\n  }\n\n  /**\n   * The CSS selector to find the table expanded rows\n   */\n  static get selectorTableExpandedRows() {\n    return `${prefix}-table-expanded-row`;\n  }\n\n  /**\n   * The CSS selector to find the table rows\n   */\n  static get selectorTableRow() {\n    return `${prefix}-table-row`;\n  }\n\n  /**\n   * The CSS selector to find the rows cells.\n   */\n  static get selectorTableRowCells() {\n    return `${prefix}-table-cell`;\n  }\n\n  /**\n   * The CSS selector to find the rows cells, including header cells.\n   */\n  static get selectorTableCells() {\n    return `${prefix}-table-cell, ${prefix}-table-header-cell`;\n  }\n\n  /**\n   * The CSS selector to find the header cell\n   */\n  static get selectorHeaderCell() {\n    return `${prefix}-table-header-cell`;\n  }\n\n  /**\n   * The CSS selector to find the rows, including header rows.\n   */\n  static get selectorRowsWithHeader() {\n    return `${prefix}-table-header-row,${prefix}-table-row`;\n  }\n\n  /**\n   * The CSS selector to find all rows\n   */\n  static get selectorAllRows() {\n    return `${prefix}-table-header-row,${prefix}-table-row,${prefix}-table-expanded-row`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSTable;\n"],"names":["customElement"],"mappings":"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"}