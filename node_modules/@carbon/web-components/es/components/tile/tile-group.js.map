{"version":3,"file":"tile-group.js","sources":["../../../src/components/tile/tile-group.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport { NAVIGATION_DIRECTION } from '../../globals/internal/radio-group-manager';\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport styles from './tile.scss?lit';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Map of navigation direction by key.\n */\nconst navigationDirectionForKey = {\n  ArrowUp: NAVIGATION_DIRECTION.BACKWARD,\n  Up: NAVIGATION_DIRECTION.BACKWARD, // IE\n  ArrowLeft: NAVIGATION_DIRECTION.BACKWARD,\n  Left: NAVIGATION_DIRECTION.BACKWARD, // IE\n  ArrowDown: NAVIGATION_DIRECTION.FORWARD,\n  Down: NAVIGATION_DIRECTION.FORWARD, // IE\n  ArrowRight: NAVIGATION_DIRECTION.FORWARD,\n  Right: NAVIGATION_DIRECTION.FORWARD, // IE\n};\n\n/**\n * Tile group.\n *\n * @element cds-tile-group\n * @fires cds-current-radio-tile-selection\n *   The name of the custom event fired after a radio tile changes its selected state.\n * @fires cds-current-selectable-tile-selections\n *   The name of the custom event fired after a selectable tile changes its selected state.\n */\n@customElement(`${prefix}-tile-group`)\nclass CDSTileGroup extends HostListenerMixin(LitElement) {\n  private _handleRadioClick(event) {\n    const { target } = event;\n    const { currentRadioSelection } = this;\n    const { eventCurrentRadioTileSelection } = this\n      .constructor as typeof CDSTileGroup;\n\n    if (target.matches(`${prefix}-ai-label`)) {\n      return;\n    }\n\n    if (!currentRadioSelection) {\n      this.currentRadioSelection = target;\n    } else if (currentRadioSelection !== target) {\n      currentRadioSelection.toggleAttribute('selected');\n      this.currentRadioSelection = target;\n    }\n\n    this.dispatchEvent(\n      new CustomEvent(eventCurrentRadioTileSelection, {\n        bubbles: true,\n        composed: true,\n        detail: {\n          target,\n        },\n      })\n    );\n  }\n\n  /**\n   * Click listener to ensure selectability.\n   *\n   * @param event click\n   */\n  @HostListener('click')\n  // @ts-ignore\n  private _handleTileSelect(event: Event) {\n    if (this.radioTiles.length) {\n      this._handleRadioClick(event);\n    }\n  }\n\n  /**\n   * Handle keyboard navigation for radio tiles\n   *\n   * @param nextSibling to focus on\n   */\n  private _handleKeydownRadio(nextSibling) {\n    const { currentRadioSelection } = this;\n\n    const { eventCurrentRadioTileSelection } = this\n      .constructor as typeof CDSTileGroup;\n\n    if (currentRadioSelection) {\n      currentRadioSelection.toggleAttribute('selected');\n    }\n    nextSibling.focus();\n    nextSibling.toggleAttribute('selected');\n    this.currentRadioSelection = nextSibling;\n\n    this.dispatchEvent(\n      new CustomEvent(eventCurrentRadioTileSelection, {\n        bubbles: true,\n        composed: true,\n        detail: {\n          nextSibling,\n        },\n      })\n    );\n  }\n\n  /**\n   * Handle keyboard navigation for selectable tiles\n   *\n   * @param event to get target\n   * @param nextSibling to focus on\n   */\n  private _handleKeydownSelectable(event, nextSibling?) {\n    const { target } = event;\n    const { currentSelections } = this;\n    const { eventCurrentSelectableTilesSelection } = this\n      .constructor as typeof CDSTileGroup;\n\n    if (nextSibling) {\n      nextSibling.focus();\n    } else {\n      if (!currentSelections.includes(target)) {\n        currentSelections.push(target);\n      } else {\n        currentSelections.splice(currentSelections.indexOf(target), 1);\n      }\n\n      this.dispatchEvent(\n        new CustomEvent(eventCurrentSelectableTilesSelection, {\n          bubbles: true,\n          composed: true,\n          detail: {\n            currentSelections,\n          },\n        })\n      );\n    }\n  }\n\n  /**\n   * Keyboard listener to ensure keyboard navigation.\n   *\n   * @param event to get key pressed\n   */\n  @HostListener('keydown')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleKeydown = (event: KeyboardEvent) => {\n    const { target, key } = event;\n    const { radioTiles, selectableTiles } = this;\n    const navigationDirection = navigationDirectionForKey[key];\n\n    if ((target as HTMLElement)?.matches(`${prefix}-ai-label`)) {\n      return;\n    }\n\n    const tiles = radioTiles.length ? radioTiles : selectableTiles;\n    const currentIndex = [...tiles].findIndex((e) => e == target);\n    const nextIndex = currentIndex + navigationDirection;\n    const nextSibling =\n      nextIndex !== -1\n        ? tiles[nextIndex % tiles.length]\n        : tiles[tiles.length - 1];\n\n    if (navigationDirection) {\n      event.preventDefault(); // Prevent default (scrolling) behavior\n\n      if (this.radioTiles.length) {\n        this._handleKeydownRadio(nextSibling);\n      } else {\n        this._handleKeydownSelectable(event, nextSibling);\n      }\n    } else if (key === ' ' || key === 'Enter') {\n      this._handleKeydownSelectable(event);\n    }\n  };\n\n  /**\n   * Focus listener to focus on selected element upon focusing\n   *\n   * @param event to get focused\n   */\n  @HostListener('focusin')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleFocus = (event: KeyboardEvent) => {\n    const { relatedTarget, target } = event as any;\n    if ((target as HTMLElement)?.matches(`${prefix}-ai-label`)) {\n      return;\n    }\n\n    if (this.radioTiles.length) {\n      if (!this.currentRadioSelection) {\n        target.toggleAttribute('selected');\n        this.currentRadioSelection = target;\n      } else if (\n        !relatedTarget?.matches(\n          (this.constructor as typeof CDSTileGroup).selectorRadioTile\n        ) &&\n        target !== this.currentRadioSelection\n      ) {\n        this.currentRadioSelection.focus();\n      }\n    }\n  };\n\n  /**\n   * Provide an optional className to be applied to the component\n   */\n  @property({ reflect: true, attribute: 'fieldset-class-name' })\n  fieldsetClassName;\n\n  /**\n   * Specify whether the group is disabled\n   */\n  @property({ reflect: true, type: Boolean })\n  disabled;\n\n  @property()\n  currentRadioSelection;\n\n  @property()\n  currentSelections = [] as any;\n\n  @property()\n  radioTiles;\n\n  @property()\n  selectableTiles;\n\n  firstUpdated() {\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'group');\n    }\n\n    if (!this.radioTiles) {\n      this.radioTiles = this.querySelectorAll(\n        (this.constructor as typeof CDSTileGroup).selectorRadioTile\n      );\n      this.radioTiles.forEach((tile) => {\n        if (tile.selected) {\n          this.currentRadioSelection = tile;\n        }\n      });\n    }\n\n    if (!this.selectableTiles) {\n      this.selectableTiles = this.querySelectorAll(\n        (this.constructor as typeof CDSTileGroup).selectorSelectableTile\n      );\n    }\n\n    if (this.disabled) {\n      this.radioTiles.forEach((e) => e.toggleAttribute('disabled'));\n      this.selectableTiles.forEach((e) => e.toggleAttribute('disabled'));\n    }\n  }\n\n  render() {\n    const { fieldsetClassName, disabled } = this;\n    return html`\n      <fieldset class=\"${fieldsetClassName}\" ?disabled=${disabled}>\n        <slot name=\"legend\" class=\"${prefix}--label\"></slot>\n        <slot></slot>\n      </fieldset>\n    `;\n  }\n\n  /**\n   * A selector that selects a radio tile component.\n   */\n  static get selectorRadioTile() {\n    return `${prefix}-radio-tile`;\n  }\n\n  /**\n   * A selector that selects a selectable tile component.\n   */\n  static get selectorSelectableTile() {\n    return `${prefix}-selectable-tile`;\n  }\n\n  /**\n   * The name of the custom event fired after a radio tile changes its selected state.\n   */\n  static get eventCurrentRadioTileSelection() {\n    return `${prefix}-current-radio-tile-selection`;\n  }\n\n  /**\n   * The name of the custom event fired after a radio tile changes its selected state.\n   */\n  static get eventCurrentSelectableTilesSelection() {\n    return `${prefix}-current-selectable-tile-selections`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSTileGroup;\n"],"names":["customElement"],"mappings":"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"}