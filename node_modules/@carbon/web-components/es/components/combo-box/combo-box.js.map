{"version":3,"file":"combo-box.js","sources":["../../../src/components/combo-box/combo-box.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2019, 2024\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { TemplateResult, html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport Close16 from '@carbon/icons/lib/close/16.js';\nimport { prefix } from '../../globals/settings';\nimport { findIndex, forEach } from '../../globals/internal/collection-helpers';\nimport CDSDropdown, { DROPDOWN_KEYBOARD_ACTION } from '../dropdown/dropdown';\nimport CDSComboBoxItem from './combo-box-item';\nimport styles from './combo-box.scss?lit';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport ifNonEmpty from '../../globals/directives/if-non-empty';\n\nexport { DROPDOWN_DIRECTION, DROPDOWN_SIZE } from '../dropdown/dropdown';\n\n/**\n * Combo box.\n *\n * @element cds-combo-box\n * @fires cds-combo-box-beingselected\n *   The custom event fired before a combo box item is selected upon a user gesture.\n *   Cancellation of this event stops changing the user-initiated selection.\n * @fires cds-combo-box-beingtoggled\n *   The custom event fired before the open state of this combo box is toggled upon a user gesture.\n *   Cancellation of this event stops the user-initiated toggling.\n * @fires cds-combo-box-selected - The custom event fired after a combo box item is selected upon a user gesture.\n * @fires cds-combo-box-toggled - The custom event fired after the open state of this combo box is toggled upon a user gesture.\n */\n@customElement(`${prefix}-combo-box`)\nclass CDSComboBox extends CDSDropdown {\n  /**\n   * The text content that should be set to the `<input>` for filtering.\n   */\n  protected _filterInputValue = '';\n\n  protected _shouldTriggerBeFocusable = false;\n\n  /**\n   * The `<input>` for filtering.\n   */\n  @query('input')\n  private _filterInputNode!: HTMLInputElement;\n\n  /**\n   * The menu containing all selectable items.\n   */\n  @query('#menu-body')\n  private _itemMenu!: HTMLElement;\n\n  /**\n   * The selection button.\n   */\n  @query('#selection-button')\n  private _selectionButtonNode!: HTMLElement;\n\n  /**\n   * @param item A combo box item.\n   * @returns `true` if the given combo box item matches the query text user types.\n   */\n  protected _testItemWithQueryText(item) {\n    return (this.itemMatches || this._defaultItemMatches)(\n      item,\n      this._filterInputNode.value\n    );\n  }\n\n  /* eslint-disable class-methods-use-this */\n  /**\n   * The default item matching callback.\n   *\n   * @param item The combo box item.\n   * @param queryText The query text user types.\n   * @returns `true` if the given combo box item matches the given query text.\n   */\n  protected _defaultItemMatches(\n    item: CDSComboBoxItem,\n    queryText: string\n  ): boolean {\n    return (\n      item.textContent!.toLowerCase().indexOf(queryText.toLowerCase()) >= 0\n    );\n  }\n  /* eslint-enable class-methods-use-this */\n\n  /**\n   * Handles `input` event on the `<input>` for filtering.\n   */\n  protected _handleInput() {\n    if (this._filterInputValue.length != 0) {\n      this.setAttribute('isClosable', '');\n    } else {\n      this.removeAttribute('isClosable');\n    }\n\n    const items = this.querySelectorAll(\n      (this.constructor as typeof CDSComboBox).selectorItem\n    );\n    const index = !this._filterInputNode.value\n      ? -1\n      : findIndex(items, this._testItemWithQueryText, this);\n    forEach(items, (item, i) => {\n      if (i === index) {\n        const menuRect = this._itemMenu?.getBoundingClientRect();\n        const itemRect = item.getBoundingClientRect();\n\n        if (menuRect && itemRect) {\n          const isViewable =\n            menuRect!.top <= itemRect?.top &&\n            itemRect?.bottom <= menuRect?.top + this._itemMenu!.clientHeight;\n          if (!isViewable) {\n            const scrollTop = itemRect?.top - menuRect?.top;\n            const scrollBot = itemRect?.bottom - menuRect?.bottom;\n\n            if (Math.abs(scrollTop) < Math.abs(scrollBot)) {\n              this._itemMenu!.scrollTop += scrollTop;\n            } else {\n              this._itemMenu!.scrollTop += scrollBot;\n            }\n          }\n        }\n      }\n      (item as CDSComboBoxItem).highlighted = i === index;\n    });\n    const { _filterInputNode: filterInput } = this;\n    this._filterInputValue = !filterInput ? '' : filterInput.value;\n    this.open = true;\n    this.requestUpdate(); // If the only change is to `_filterInputValue`, auto-update doesn't happen\n  }\n\n  protected _handleClickInner(event: MouseEvent) {\n    const { target } = event as any;\n    if (this._selectionButtonNode?.contains(target)) {\n      this._handleUserInitiatedClearInput();\n    } else {\n      super._handleClickInner(event);\n    }\n  }\n\n  protected _handleKeypressInner(event: KeyboardEvent) {\n    const { key } = event;\n    const action = (this.constructor as typeof CDSDropdown).getAction(key);\n    const { TRIGGERING } = DROPDOWN_KEYBOARD_ACTION;\n    if (\n      this._selectionButtonNode?.contains(event.target as Node) &&\n      // Space key should be handled by `<input>` unless \"clear selection\" button has focus\n      (action === TRIGGERING || key === ' ')\n    ) {\n      this._handleUserInitiatedClearInput();\n    } else {\n      super._handleKeypressInner(event);\n    }\n  }\n\n  /**\n   * Handles user-initiated clearing the `<input>` for filtering.\n   */\n  protected _handleUserInitiatedClearInput() {\n    forEach(\n      this.querySelectorAll(\n        (this.constructor as typeof CDSComboBox).selectorItem\n      ),\n      (item) => {\n        (item as CDSComboBoxItem).highlighted = false;\n      }\n    );\n    this._filterInputValue = '';\n    this._filterInputNode.focus();\n    this._handleUserInitiatedSelectItem();\n  }\n\n  protected _handleUserInitiatedSelectItem(item?: CDSComboBoxItem) {\n    if (item && !this._selectionShouldChange(item)) {\n      // Escape hatch for `shouldUpdate()` logic that updates `._filterInputValue()` when selection changes,\n      // given we want to update the `<input>` and close the dropdown even if selection doesn't update.\n      // Use case:\n      // 1. Select the 2nd item in combo box drop down\n      // 2. Type some text in the `<input>`\n      // 3. Re-select the 2nd item in combo box drop down,\n      //    the `<input>` has to updated with the 2nd item and the dropdown should be closed,\n      //    even if there is no change in the selected value\n      this._filterInputValue = item.textContent || '';\n      this.open = false;\n      this.requestUpdate();\n    }\n    super._handleUserInitiatedSelectItem(item);\n  }\n\n  protected _selectionDidChange(itemToSelect?: CDSComboBoxItem) {\n    this.value = !itemToSelect ? '' : itemToSelect.value;\n    forEach(\n      this.querySelectorAll(\n        (this.constructor as typeof CDSDropdown).selectorItemSelected\n      ),\n      (item) => {\n        (item as CDSComboBoxItem).selected = false;\n        item.setAttribute('aria-selected', 'false');\n      }\n    );\n    if (itemToSelect) {\n      itemToSelect.selected = true;\n      itemToSelect.setAttribute('aria-selected', 'true');\n    }\n    this._handleUserInitiatedToggle(false);\n  }\n\n  protected _renderLabel(): TemplateResult {\n    const {\n      disabled,\n      inputLabel,\n      label,\n      open,\n      readOnly,\n      value,\n      _activeDescendant: activeDescendant,\n      _filterInputValue: filterInputValue,\n      _handleInput: handleInput,\n    } = this;\n\n    const inputClasses = classMap({\n      [`${prefix}--text-input`]: true,\n      [`${prefix}--text-input--empty`]: !value,\n    });\n\n    let activeDescendantFallback: string | undefined;\n    if (open && !activeDescendant) {\n      const constructor = this.constructor as typeof CDSDropdown;\n      const items = this.querySelectorAll(constructor.selectorItem);\n      activeDescendantFallback = items[0]?.id;\n    }\n\n    return html`\n      <input\n        id=\"trigger-button\"\n        class=\"${inputClasses}\"\n        ?disabled=${disabled}\n        placeholder=\"${label}\"\n        .value=${filterInputValue}\n        role=\"combobox\"\n        aria-label=\"${ifNonEmpty(inputLabel)}\"\n        aria-controls=\"menu-body\"\n        aria-haspopup=\"listbox\"\n        aria-autocomplete=\"list\"\n        aria-expanded=\"${String(open)}\"\n        aria-activedescendant=\"${ifDefined(\n          open ? (activeDescendant ?? activeDescendantFallback) : ''\n        )}\"\n        ?readonly=${readOnly}\n        @input=${handleInput} />\n    `;\n  }\n\n  protected _renderFollowingLabel(): TemplateResult | void {\n    const { clearSelectionLabel, _filterInputValue: filterInputValue } = this;\n\n    if (filterInputValue.length != 0) {\n      this.setAttribute('isClosable', '');\n    } else {\n      this.removeAttribute('isClosable');\n    }\n\n    return filterInputValue.length === 0\n      ? undefined\n      : html`\n          <div\n            id=\"selection-button\"\n            role=\"button\"\n            class=\"${prefix}--list-box__selection\"\n            tabindex=\"0\"\n            title=\"${clearSelectionLabel}\">\n            ${Close16({ 'aria-label': clearSelectionLabel })}\n          </div>\n        `;\n  }\n\n  /**\n   * The `aria-label` attribute for the icon to clear selection.\n   */\n  @property({ attribute: 'clear-selection-label' })\n  clearSelectionLabel = 'Clear selection';\n\n  /**\n   * The `aria-label` attribute for the `<input>` for filtering.\n   */\n  @property({ attribute: 'input-label' })\n  inputLabel = '';\n\n  /**\n   * The custom item matching callback.\n   */\n  @property({ attribute: false })\n  itemMatches!: (item: CDSComboBoxItem, queryText: string) => boolean;\n\n  shouldUpdate(changedProperties) {\n    super.shouldUpdate(changedProperties);\n    const { _selectedItemContent: selectedItemContent } = this;\n    if (selectedItemContent && changedProperties.has('value')) {\n      this._filterInputValue = selectedItemContent?.textContent || '';\n    }\n    return true;\n  }\n\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    const { _listBoxNode: listBoxNode } = this;\n    if (listBoxNode) {\n      listBoxNode.classList.add(`${prefix}--combo-box`);\n    }\n  }\n\n  // For combo box, open/selection with space key is disabled given the input box should take it over\n  static TRIGGER_KEYS = new Set(['Enter']);\n\n  /**\n   * A selector that will return highlighted items.\n   */\n  static get selectorItemHighlighted() {\n    return `${prefix}-combo-box-item[highlighted]`;\n  }\n\n  /**\n   * A selector that will return combo box items.\n   */\n  static get selectorItem() {\n    return `${prefix}-combo-box-item`;\n  }\n\n  /**\n   * A selector that will return selected items.\n   */\n  static get selectorItemSelected() {\n    return `${prefix}-combo-box-item[selected]`;\n  }\n\n  /**\n   * The name of the custom event fired before this combo box item is being toggled upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of toggling this combo box item.\n   */\n  static get eventBeforeToggle() {\n    return `${prefix}-combo-box-beingtoggled`;\n  }\n\n  /**\n   * The name of the custom event fired after this combo box item is toggled upon a user gesture.\n   */\n  static get eventToggle() {\n    return `${prefix}-combo-box-toggled`;\n  }\n\n  /**\n   * The name of the custom event fired before a combo box item is selected upon a user gesture.\n   * Cancellation of this event stops changing the user-initiated selection.\n   */\n  static get eventBeforeSelect() {\n    return `${prefix}-combo-box-beingselected`;\n  }\n\n  /**\n   * The name of the custom event fired after a a combo box item is selected upon a user gesture.\n   */\n  static get eventSelect() {\n    return `${prefix}-combo-box-selected`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSComboBox;\n"],"names":["customElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKG;AAiBH;;;;;;;;;;;;AAYG;AAEH,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,WAAW,CAAA;AAArC,IAAA,WAAA,GAAA;;AACE;;AAEG;QACO,IAAiB,CAAA,iBAAA,GAAG,EAAE;QAEtB,IAAyB,CAAA,yBAAA,GAAG,KAAK;AA+O3C;;AAEG;QAEH,IAAmB,CAAA,mBAAA,GAAG,iBAAiB;AAEvC;;AAEG;QAEH,IAAU,CAAA,UAAA,GAAG,EAAE;;AArOf;;;AAGG;AACO,IAAA,sBAAsB,CAAC,IAAI,EAAA;AACnC,QAAA,OAAO,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,mBAAmB,EAClD,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAC5B;;;AAIH;;;;;;AAMG;IACO,mBAAmB,CAC3B,IAAqB,EACrB,SAAiB,EAAA;AAEjB,QAAA,QACE,IAAI,CAAC,WAAY,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;;;AAKzE;;AAEG;IACO,YAAY,GAAA;QACpB,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,EAAE;AACtC,YAAA,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,EAAE,CAAC;;aAC9B;AACL,YAAA,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;;AAGpC,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAChC,IAAI,CAAC,WAAkC,CAAC,YAAY,CACtD;AACD,QAAA,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;cACjC;cACA,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC;QACvD,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAI;;AACzB,YAAA,IAAI,CAAC,KAAK,KAAK,EAAE;gBACf,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,qBAAqB,EAAE;AACxD,gBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,EAAE;AAE7C,gBAAA,IAAI,QAAQ,IAAI,QAAQ,EAAE;AACxB,oBAAA,MAAM,UAAU,GACd,QAAS,CAAC,GAAG,KAAI,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,MAAA,GAAA,MAAA,GAAR,QAAQ,CAAE,GAAG,CAAA;wBAC9B,CAAA,QAAQ,aAAR,QAAQ,KAAA,MAAA,GAAA,MAAA,GAAR,QAAQ,CAAE,MAAM,KAAI,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAR,MAAA,GAAA,MAAA,GAAA,QAAQ,CAAE,GAAG,IAAG,IAAI,CAAC,SAAU,CAAC,YAAY;oBAClE,IAAI,CAAC,UAAU,EAAE;AACf,wBAAA,MAAM,SAAS,GAAG,CAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,uBAAR,QAAQ,CAAE,GAAG,KAAG,QAAQ,aAAR,QAAQ,KAAA,MAAA,GAAA,MAAA,GAAR,QAAQ,CAAE,GAAG,CAAA;AAC/C,wBAAA,MAAM,SAAS,GAAG,CAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,uBAAR,QAAQ,CAAE,MAAM,KAAG,QAAQ,aAAR,QAAQ,KAAA,MAAA,GAAA,MAAA,GAAR,QAAQ,CAAE,MAAM,CAAA;AAErD,wBAAA,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AAC7C,4BAAA,IAAI,CAAC,SAAU,CAAC,SAAS,IAAI,SAAS;;6BACjC;AACL,4BAAA,IAAI,CAAC,SAAU,CAAC,SAAS,IAAI,SAAS;;;;;AAK7C,YAAA,IAAwB,CAAC,WAAW,GAAG,CAAC,KAAK,KAAK;AACrD,SAAC,CAAC;AACF,QAAA,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAAG,IAAI;AAC9C,QAAA,IAAI,CAAC,iBAAiB,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,WAAW,CAAC,KAAK;AAC9D,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI;AAChB,QAAA,IAAI,CAAC,aAAa,EAAE,CAAC;;AAGb,IAAA,iBAAiB,CAAC,KAAiB,EAAA;;AAC3C,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,KAAY;QAC/B,IAAI,CAAA,EAAA,GAAA,IAAI,CAAC,oBAAoB,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/C,IAAI,CAAC,8BAA8B,EAAE;;aAChC;AACL,YAAA,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC;;;AAIxB,IAAA,oBAAoB,CAAC,KAAoB,EAAA;;AACjD,QAAA,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK;QACrB,MAAM,MAAM,GAAI,IAAI,CAAC,WAAkC,CAAC,SAAS,CAAC,GAAG,CAAC;AACtE,QAAA,MAAM,EAAE,UAAU,EAAE,GAAG,wBAAwB;QAC/C,IACE,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,oBAAoB,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,QAAQ,CAAC,KAAK,CAAC,MAAc,CAAC;;aAExD,MAAM,KAAK,UAAU,IAAI,GAAG,KAAK,GAAG,CAAC,EACtC;YACA,IAAI,CAAC,8BAA8B,EAAE;;aAChC;AACL,YAAA,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC;;;AAIrC;;AAEG;IACO,8BAA8B,GAAA;AACtC,QAAA,OAAO,CACL,IAAI,CAAC,gBAAgB,CAClB,IAAI,CAAC,WAAkC,CAAC,YAAY,CACtD,EACD,CAAC,IAAI,KAAI;AACN,YAAA,IAAwB,CAAC,WAAW,GAAG,KAAK;AAC/C,SAAC,CACF;AACD,QAAA,IAAI,CAAC,iBAAiB,GAAG,EAAE;AAC3B,QAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;QAC7B,IAAI,CAAC,8BAA8B,EAAE;;AAG7B,IAAA,8BAA8B,CAAC,IAAsB,EAAA;QAC7D,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;;;;;;;;;YAS9C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,IAAI,EAAE;AAC/C,YAAA,IAAI,CAAC,IAAI,GAAG,KAAK;YACjB,IAAI,CAAC,aAAa,EAAE;;AAEtB,QAAA,KAAK,CAAC,8BAA8B,CAAC,IAAI,CAAC;;AAGlC,IAAA,mBAAmB,CAAC,YAA8B,EAAA;AAC1D,QAAA,IAAI,CAAC,KAAK,GAAG,CAAC,YAAY,GAAG,EAAE,GAAG,YAAY,CAAC,KAAK;AACpD,QAAA,OAAO,CACL,IAAI,CAAC,gBAAgB,CAClB,IAAI,CAAC,WAAkC,CAAC,oBAAoB,CAC9D,EACD,CAAC,IAAI,KAAI;AACN,YAAA,IAAwB,CAAC,QAAQ,GAAG,KAAK;AAC1C,YAAA,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC;AAC7C,SAAC,CACF;QACD,IAAI,YAAY,EAAE;AAChB,YAAA,YAAY,CAAC,QAAQ,GAAG,IAAI;AAC5B,YAAA,YAAY,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC;;AAEpD,QAAA,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC;;IAG9B,YAAY,GAAA;;QACpB,MAAM,EACJ,QAAQ,EACR,UAAU,EACV,KAAK,EACL,IAAI,EACJ,QAAQ,EACR,KAAK,EACL,iBAAiB,EAAE,gBAAgB,EACnC,iBAAiB,EAAE,gBAAgB,EACnC,YAAY,EAAE,WAAW,GAC1B,GAAG,IAAI;QAER,MAAM,YAAY,GAAG,QAAQ,CAAC;AAC5B,YAAA,CAAC,CAAG,EAAA,MAAM,CAAc,YAAA,CAAA,GAAG,IAAI;AAC/B,YAAA,CAAC,GAAG,MAAM,CAAA,mBAAA,CAAqB,GAAG,CAAC,KAAK;AACzC,SAAA,CAAC;AAEF,QAAA,IAAI,wBAA4C;AAChD,QAAA,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC7B,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,WAAiC;YAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,YAAY,CAAC;YAC7D,wBAAwB,GAAG,MAAA,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,EAAE;;AAGzC,QAAA,OAAO,IAAI,CAAA;;;iBAGE,YAAY,CAAA;oBACT,QAAQ;uBACL,KAAK,CAAA;iBACX,gBAAgB;;sBAEX,UAAU,CAAC,UAAU,CAAC,CAAA;;;;yBAInB,MAAM,CAAC,IAAI,CAAC,CAAA;AACJ,+BAAA,EAAA,SAAS,CAChC,IAAI,IAAI,gBAAgB,KAAhB,IAAA,IAAA,gBAAgB,KAAhB,MAAA,GAAA,gBAAgB,GAAI,wBAAwB,IAAI,EAAE,CAC3D,CAAA;oBACW,QAAQ;iBACX,WAAW,CAAA;KACvB;;IAGO,qBAAqB,GAAA;QAC7B,MAAM,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,GAAG,IAAI;AAEzE,QAAA,IAAI,gBAAgB,CAAC,MAAM,IAAI,CAAC,EAAE;AAChC,YAAA,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,EAAE,CAAC;;aAC9B;AACL,YAAA,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;;AAGpC,QAAA,OAAO,gBAAgB,CAAC,MAAM,KAAK;AACjC,cAAE;cACA,IAAI,CAAA;;;;qBAIS,MAAM,CAAA;;qBAEN,mBAAmB,CAAA;AAC1B,YAAA,EAAA,OAAO,CAAC,EAAE,YAAY,EAAE,mBAAmB,EAAE,CAAC;;SAEnD;;AAqBP,IAAA,YAAY,CAAC,iBAAiB,EAAA;AAC5B,QAAA,KAAK,CAAC,YAAY,CAAC,iBAAiB,CAAC;AACrC,QAAA,MAAM,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,GAAG,IAAI;QAC1D,IAAI,mBAAmB,IAAI,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AACzD,YAAA,IAAI,CAAC,iBAAiB,GAAG,CAAA,mBAAmB,KAAA,IAAA,IAAnB,mBAAmB,KAAA,MAAA,GAAA,MAAA,GAAnB,mBAAmB,CAAE,WAAW,KAAI,EAAE;;AAEjE,QAAA,OAAO,IAAI;;AAGb,IAAA,OAAO,CAAC,iBAAiB,EAAA;AACvB,QAAA,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC;AAChC,QAAA,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,IAAI;QAC1C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAG,EAAA,MAAM,CAAa,WAAA,CAAA,CAAC;;;AAOrD;;AAEG;AACH,IAAA,WAAW,uBAAuB,GAAA;QAChC,OAAO,CAAA,EAAG,MAAM,CAAA,4BAAA,CAA8B;;AAGhD;;AAEG;AACH,IAAA,WAAW,YAAY,GAAA;QACrB,OAAO,CAAA,EAAG,MAAM,CAAA,eAAA,CAAiB;;AAGnC;;AAEG;AACH,IAAA,WAAW,oBAAoB,GAAA;QAC7B,OAAO,CAAA,EAAG,MAAM,CAAA,yBAAA,CAA2B;;AAG7C;;;AAGG;AACH,IAAA,WAAW,iBAAiB,GAAA;QAC1B,OAAO,CAAA,EAAG,MAAM,CAAA,uBAAA,CAAyB;;AAG3C;;AAEG;AACH,IAAA,WAAW,WAAW,GAAA;QACpB,OAAO,CAAA,EAAG,MAAM,CAAA,kBAAA,CAAoB;;AAGtC;;;AAGG;AACH,IAAA,WAAW,iBAAiB,GAAA;QAC1B,OAAO,CAAA,EAAG,MAAM,CAAA,wBAAA,CAA0B;;AAG5C;;AAEG;AACH,IAAA,WAAW,WAAW,GAAA;QACpB,OAAO,CAAA,EAAG,MAAM,CAAA,mBAAA,CAAqB;;;AAnDvC;AACO,WAAY,CAAA,YAAA,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAApB;AAqDZ,WAAM,CAAA,MAAA,GAAG,MAAH;AAlUL,UAAA,CAAA;IADP,KAAK,CAAC,OAAO;AAC8B,CAAA,EAAA,WAAA,CAAA,SAAA,EAAA,kBAAA,EAAA,MAAA,CAAA;AAMpC,UAAA,CAAA;IADP,KAAK,CAAC,YAAY;AACa,CAAA,EAAA,WAAA,CAAA,SAAA,EAAA,WAAA,EAAA,MAAA,CAAA;AAMxB,UAAA,CAAA;IADP,KAAK,CAAC,mBAAmB;AACiB,CAAA,EAAA,WAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,MAAA,CAAA;AAiO3C,UAAA,CAAA;AADC,IAAA,QAAQ,CAAC,EAAE,SAAS,EAAE,uBAAuB,EAAE;AACR,CAAA,EAAA,WAAA,CAAA,SAAA,EAAA,qBAAA,EAAA,MAAA,CAAA;AAMxC,UAAA,CAAA;AADC,IAAA,QAAQ,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE;AACtB,CAAA,EAAA,WAAA,CAAA,SAAA,EAAA,YAAA,EAAA,MAAA,CAAA;AAMhB,UAAA,CAAA;AADC,IAAA,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE;AACsC,CAAA,EAAA,WAAA,CAAA,SAAA,EAAA,aAAA,EAAA,MAAA,CAAA;AArQhE,WAAW,GAAA,UAAA,CAAA;AADhB,IAAAA,aAAa,CAAC,CAAA,EAAG,MAAM,CAAA,UAAA,CAAY;AAC9B,CAAA,EAAA,WAAW,CA+UhB;AAED,oBAAe,WAAW;;;;"}