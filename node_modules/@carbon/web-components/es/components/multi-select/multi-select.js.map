{"version":3,"file":"multi-select.js","sources":["../../../src/components/multi-select/multi-select.ts"],"sourcesContent":["/**\n * Copyright IBM Corp. 2020, 2025\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport Close16 from '@carbon/icons/lib/close/16.js';\nimport { prefix } from '../../globals/settings';\nimport {\n  filter,\n  forEach,\n  indexOf,\n} from '../../globals/internal/collection-helpers';\nimport CDSDropdown, {\n  DROPDOWN_KEYBOARD_ACTION,\n  DROPDOWN_TYPE,\n} from '../dropdown/dropdown';\nimport { SELECTION_FEEDBACK_OPTION } from './defs';\nimport CDSMultiSelectItem from './multi-select-item';\nimport styles from './multi-select.scss?lit';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\nexport {\n  DROPDOWN_SIZE,\n  DROPDOWN_TYPE,\n  DROPDOWN_DIRECTION,\n} from '../dropdown/dropdown';\n\nexport { SELECTION_FEEDBACK_OPTION };\n\n/**\n * Multi select.\n *\n * @element cds-multi-select\n * @fires cds-multi-select-beingselected\n *   The custom event fired before a multi select item is selected upon a user gesture.\n *   Cancellation of this event stops changing the user-initiated selection.\n * @fires cds-multi-select-selected - The custom event fired after a multi select item is selected upon a user gesture.\n * @fires cds-multi-select-beingtoggled\n *   The custom event fired before the open state of this multi select is toggled upon a user gesture.\n *   Cancellation of this event stops the user-initiated toggling.\n * @fires cds-multi-select-toggled\n *   The custom event fired after the open state of this multi select is toggled upon a user gesture.\n */\n@customElement(`${prefix}-multi-select`)\nclass CDSMultiSelect extends CDSDropdown {\n  @property({ type: Boolean })\n  filterable;\n\n  /**\n   * The count of selected items.\n   */\n  private _selectedItemsCount = 0;\n\n  /**\n   * The clear button.\n   */\n  @query('#clear-button')\n  private _clearButtonNode!: HTMLElement;\n\n  /**\n   * The selection button.\n   */\n  @query('#selection-button')\n  private _selectionButtonNode!: HTMLElement;\n\n  /**\n   * The `<input>` for filtering.\n   */\n  @query('input')\n  private _filterInputNode!: HTMLInputElement;\n\n  /**\n   * The trigger button.\n   */\n  @query(`.${prefix}--list-box__field`)\n  private _triggerNode!: HTMLElement;\n\n  protected _selectionShouldChange(itemToSelect?: CDSMultiSelectItem) {\n    // If we are selecting an item, assumes we always toggle\n    return Boolean(this.value || itemToSelect);\n  }\n\n  protected _selectionDidChange(itemToSelect?: CDSMultiSelectItem) {\n    const allItems = Array.from(\n      this.querySelectorAll(\n        (this.constructor as typeof CDSMultiSelect).selectorItem\n      )\n    ) as CDSMultiSelectItem[];\n\n    // clicked \"select all\" when it was indeterminate\n    if (itemToSelect?.isSelectAll && itemToSelect.indeterminate) {\n      allItems.forEach((i) => {\n        i.selected = false;\n        i.indeterminate = false;\n      });\n      this.value = '';\n      return;\n    }\n\n    if (itemToSelect) {\n      // clicked select all\n      if (itemToSelect.isSelectAll) {\n        allItems.forEach((i) => {\n          if (!i.isSelectAll && !i.disabled) {\n            i.selected = !itemToSelect.selected;\n          }\n          i.indeterminate = false;\n        });\n        itemToSelect.selected = !itemToSelect.selected;\n        // clicked regular item\n      } else {\n        itemToSelect.selected = !itemToSelect.selected;\n      }\n    } else {\n      forEach(\n        this.querySelectorAll(\n          (this.constructor as typeof CDSMultiSelect).selectorItemSelected\n        ),\n        (item) => {\n          (item as CDSMultiSelectItem).selected = false;\n        }\n      );\n      this._handleUserInitiatedToggle(false);\n    }\n    if (this.selectAll) this._computeSelectAllState();\n    // Change in `.selected` hasn't been reflected to the corresponding attribute yet\n    this.value = filter(\n      this.querySelectorAll(\n        (this.constructor as typeof CDSMultiSelect).selectorItem\n      ),\n      (item) => (item as CDSMultiSelectItem).selected\n    )\n      .map((item) => (item as CDSMultiSelectItem).value)\n      .join(',');\n  }\n\n  protected _handleClickInner(event: MouseEvent) {\n    const clickedItem = (event.target as HTMLElement).closest(\n      `${prefix}-multi-select-item`\n    ) as CDSMultiSelectItem | null;\n    if (\n      this._selectionButtonNode?.contains(event.target as Node) &&\n      !this.readOnly\n    ) {\n      this._handleUserInitiatedSelectItem();\n      if (this.filterable) {\n        this._filterInputNode.focus();\n      } else {\n        this._triggerNode.focus();\n      }\n    } else if (clickedItem && !clickedItem.hasAttribute('disabled')) {\n      // Handle focus highlight\n      const allItems = this.querySelectorAll(`${prefix}-multi-select-item`);\n      allItems.forEach((el) => el.removeAttribute('highlighted'));\n      clickedItem.setAttribute('highlighted', '');\n      this._handleUserInitiatedSelectItem(clickedItem);\n      this.setAttribute('item-clicked', '');\n      if (this.filterable) {\n        this._filterInputNode.focus();\n      }\n    } else if (this._clearButtonNode?.contains(event.target as Node)) {\n      this._handleUserInitiatedClearInput();\n    } else if (\n      !(event.target as HTMLElement)?.matches(\n        (this.constructor as typeof CDSMultiSelect).aiLabelItem\n      ) &&\n      // remove reference to slug in v12\n      !(event.target as HTMLElement)?.matches(\n        (this.constructor as typeof CDSMultiSelect).slugItem\n      )\n    ) {\n      super._handleClickInner(event);\n      if (this.filterable) {\n        this._filterInputNode.focus();\n      }\n    }\n  }\n\n  /**\n   * Handler for the `keypress` event, ensures filter still works upon entering space\n   */\n  protected _handleKeypressInner(event: KeyboardEvent) {\n    const { key } = event;\n    const action = (this.constructor as typeof CDSDropdown).getAction(key);\n    const { TRIGGERING } = DROPDOWN_KEYBOARD_ACTION;\n\n    if (\n      this._clearButtonNode?.contains(event.target as Node) &&\n      // Space key should be handled by `<input>` unless \"clear selection\" button has focus\n      (action === TRIGGERING || key === ' ')\n    ) {\n      this._handleUserInitiatedClearInput();\n    } else if (this._selectionButtonNode?.contains(event.target as Node)) {\n      this._handleUserInitiatedSelectItem();\n      this.open = true;\n      if (this.filterable) {\n        this._filterInputNode.focus();\n      } else {\n        this._triggerNode.focus();\n      }\n    } else if (this.filterable) {\n      this._handleKeypressInnerFlterable(event);\n    } else {\n      super._handleKeypressInner(event);\n    }\n  }\n\n  /**\n   * Special andler for the `keypress` event, ensures space selection for filterable\n   * variation is disabled\n   */\n\n  protected _handleKeypressInnerFlterable(event: KeyboardEvent) {\n    const { key } = event;\n    const action = (this.constructor as typeof CDSDropdown).getAction(key);\n    if (!this.open) {\n      switch (action) {\n        case DROPDOWN_KEYBOARD_ACTION.TRIGGERING:\n          this._handleUserInitiatedToggle(true);\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'Enter':\n          {\n            const constructor = this.constructor as typeof CDSDropdown;\n            const highlightedItem = this.querySelector(\n              constructor.selectorItemHighlighted\n            ) as CDSMultiSelectItem;\n            if (highlightedItem) {\n              this._handleUserInitiatedSelectItem(highlightedItem);\n            } else {\n              this._handleUserInitiatedToggle(false);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  protected _renderTitleLabel() {\n    const {\n      clearSelectionDescription,\n      clearSelectionText,\n      disabled,\n      hideLabel,\n      titleText,\n      _selectedItemsCount: selectedItemsCount,\n      _slotTitleTextNode: slotTitleTextNode,\n      _handleSlotchangeLabelText: handleSlotchangeLabelText,\n    } = this;\n\n    const labelClasses = classMap({\n      [`${prefix}--label`]: true,\n      [`${prefix}--label--disabled`]: disabled,\n      [`${prefix}--visually-hidden`]: hideLabel,\n    });\n\n    const hasTitleText =\n      titleText ||\n      (slotTitleTextNode && slotTitleTextNode.assignedNodes().length > 0);\n\n    return html`\n      <label\n        part=\"title-text\"\n        class=\"${labelClasses}\"\n        ?hidden=\"${!hasTitleText}\">\n        <slot name=\"title-text\" @slotchange=\"${handleSlotchangeLabelText}\"\n          >${titleText}</slot\n        >\n        ${selectedItemsCount > 0\n          ? html`\n              <span class=\"${prefix}--visually-hidden\">\n                ${clearSelectionDescription} ${selectedItemsCount},\n                ${clearSelectionText}\n              </span>\n            `\n          : null}\n      </label>\n    `;\n  }\n\n  protected _renderPrecedingLabel() {\n    const {\n      disabled,\n      readOnly,\n      clearSelectionLabel,\n      _selectedItemsCount: selectedItemsCount,\n    } = this;\n\n    const selectionButtonClasses = classMap({\n      [`${prefix}--list-box__selection`]: true,\n      [`${prefix}--list-box__selection--multi`]: true,\n      [`${prefix}--tag`]: true,\n      [`${prefix}--tag--filter`]: true,\n      [`${prefix}--tag--high-contrast`]: true,\n      [`${prefix}--tag--disabled`]: disabled,\n    });\n    return selectedItemsCount === 0\n      ? undefined\n      : html`\n          <div\n            id=\"selection-button\"\n            role=\"button\"\n            class=\"${selectionButtonClasses}\"\n            tabindex=\"-1\"\n            aria-disabled=${readOnly}\n            title=\"${clearSelectionLabel}\">\n            ${selectedItemsCount}\n            ${Close16({\n              'aria-label': clearSelectionLabel,\n              class: `${prefix}--tag__close-icon`,\n            })}\n          </div>\n        `;\n  }\n\n  /**\n    @returns The main content of the trigger button.\n   */\n  protected _renderLabel(): TemplateResult {\n    const { label, value, _selectedItemContent: selectedItemContent } = this;\n\n    const inputClasses = classMap({\n      [`${prefix}--text-input`]: true,\n      [`${prefix}--text-input--empty`]: !value,\n    });\n\n    return !this.filterable\n      ? html`\n          <span id=\"trigger-label\" class=\"${prefix}--list-box__label\"\n            >${selectedItemContent || label}</span\n          >\n        `\n      : html`\n          <input\n            id=\"trigger-label\"\n            class=\"${inputClasses}\"\n            placeholder=\"${label}\"\n            role=\"combobox\"\n            aria-controls=\"menu-body\"\n            aria-autocomplete=\"list\"\n            @input=\"${this._handleInput}\" />\n        `;\n  }\n\n  protected _renderFollowingLabel(): TemplateResult | void {\n    const { clearSelectionLabel, _filterInputNode: filterInputNode } = this;\n    return filterInputNode &&\n      filterInputNode.value.length > 0 &&\n      this.filterable\n      ? html`\n          <div\n            id=\"clear-button\"\n            role=\"button\"\n            class=\"${prefix}--list-box__selection\"\n            tabindex=\"0\"\n            title=\"${clearSelectionLabel}\">\n            ${Close16({ 'aria-label': clearSelectionLabel })}\n          </div>\n        `\n      : undefined;\n  }\n\n  /**\n   * Handles `input` event on the `<input>` for filtering.\n   */\n  protected _handleInput() {\n    const items = this.querySelectorAll(\n      (this.constructor as typeof CDSMultiSelect).selectorItem\n    );\n    const inputValue = this._filterInputNode.value.toLocaleLowerCase();\n    this.toggleAttribute('has-value', inputValue.length > 0);\n\n    if (!this.open) {\n      this.open = true;\n    }\n\n    forEach(items, (item) => {\n      // always show the selectAll item\n      if ((item as CDSMultiSelectItem).isSelectAll) {\n        item.removeAttribute('filtered');\n        return;\n      }\n      const itemValue = (item as HTMLElement).innerText.toLocaleLowerCase();\n\n      if (!itemValue.includes(inputValue)) {\n        (item as CDSMultiSelectItem).setAttribute('filtered', '');\n        (item as CDSMultiSelectItem).removeAttribute('highlighted');\n      } else {\n        (item as CDSMultiSelectItem).removeAttribute('filtered');\n      }\n    });\n\n    this.requestUpdate();\n\n    const constructor = this.constructor as typeof CDSMultiSelect;\n    const visibleItems = Array.from(\n      this.querySelectorAll(constructor.selectorItemResults)\n    ) as CDSMultiSelectItem[];\n\n    if (visibleItems.length > 0) {\n      visibleItems.forEach((i) => i.removeAttribute('highlighted'));\n      this.setAttribute('item-clicked', '');\n      const first = visibleItems[0] as HTMLElement;\n      first.setAttribute('highlighted', '');\n      first.focus();\n    } else {\n      this._filterInputNode.focus();\n    }\n  }\n\n  /**\n   * Navigate through dropdown items.\n   *\n   * @param direction `-1` to navigate backward, `1` to navigate forward.\n   */\n  protected _navigate(direction: number) {\n    if (!this.filterable) {\n      super._navigate(direction);\n      this._triggerNode.classList.add('no-focus-style');\n    } else {\n      // only navigate through remaining item\n      const constructor = this.constructor as typeof CDSMultiSelect;\n      const items = this.querySelectorAll(constructor.selectorItemResults);\n      const highlightedItem = this.querySelector(\n        constructor.selectorItemHighlighted\n      );\n      const highlightedIndex = indexOf(items, highlightedItem!);\n\n      let nextIndex = highlightedIndex + direction;\n\n      if (items[nextIndex]?.hasAttribute('disabled')) {\n        nextIndex += direction;\n      }\n      if (nextIndex < 0) {\n        nextIndex = items.length - 1;\n      }\n      if (nextIndex >= items.length) {\n        nextIndex = 0;\n      }\n      forEach(items, (item, i) => {\n        (item as CDSMultiSelectItem).highlighted = i === nextIndex;\n      });\n      this.setAttribute('item-clicked', '');\n    }\n  }\n\n  /**\n   * Handles user-initiated clearing the `<input>` for filtering.\n   */\n  protected _handleUserInitiatedClearInput() {\n    const constructor = this.constructor as typeof CDSMultiSelect;\n    const items = this.querySelectorAll(constructor.selectorItemFiltered);\n    this._filterInputNode.value = '';\n    this.open = true;\n    this._filterInputNode.focus();\n    forEach(items, (item) => {\n      (item as CDSMultiSelectItem).removeAttribute('filtered');\n    });\n    this._filterInputNode.dispatchEvent(\n      new Event('input', { bubbles: true, composed: true })\n    );\n  }\n\n  /**\n   * The `aria-label` attribute for the icon to clear selection.\n   */\n  @property({ attribute: 'clear-selection-label' })\n  clearSelectionLabel = '';\n\n  /**\n   * Specify the text that should be read for screen readers that describes total items selected\n   */\n  @property({ attribute: 'clear-selection-description' })\n  clearSelectionDescription = 'Total items selected: ';\n\n  /**\n   * Specify the text that should be read for screen readers to clear selection.\n   */\n  @property({ attribute: 'clear-selection-text' })\n  clearSelectionText = 'To clear selection, press Delete or Backspace.';\n\n  /**\n   * Specify the locale of the control. Used for the default compareItems used for sorting the list of items in the control.\n   */\n  @property()\n  locale = 'en';\n\n  /**\n   * Enables rendering of a “Select all” multi-select-item\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'select-all' })\n  selectAll = false;\n\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  @property({ attribute: 'selection-feedback' })\n  selectionFeedback = SELECTION_FEEDBACK_OPTION.TOP_AFTER_REOPEN;\n\n  /**\n   * The CSS class list for multi-select listbox\n   */\n  protected get _classes(): any {\n    const {\n      disabled,\n      size,\n      type,\n      invalid,\n      readOnly,\n      open,\n      warn,\n      _selectedItemsCount: selectedItemsCount,\n    } = this;\n    const inline = type === DROPDOWN_TYPE.INLINE;\n\n    return classMap({\n      [`${prefix}--multi-select`]: true,\n      [`${prefix}--list-box`]: true,\n      [`${prefix}--list-box--disabled`]: disabled,\n      [`${prefix}--list-box--inline`]: inline,\n      [`${prefix}--list-box--expanded`]: open,\n      [`${prefix}--list-box--${size}`]: size,\n      [`${prefix}--multi-select--invalid`]: invalid,\n      [`${prefix}--multi-select--warn`]: warn,\n      [`${prefix}--multi-select--inline`]: inline,\n      [`${prefix}--multi-select--readonly`]: readOnly,\n      [`${prefix}--multi-select--selected`]: selectedItemsCount > 0,\n      [`${prefix}--list-box__wrapper--decorator`]: this._hasAILabel, // inherited from CDSDropdown\n      [`${prefix}--multi-select--selectall`]: this.selectAll,\n    });\n  }\n\n  protected compareItems = (itemA, itemB, { locale }) => {\n    itemA.localeCompare(itemB, locale, { numeric: true });\n  };\n\n  protected sortItems = (\n    menuItems: NodeList,\n    { values, compareItems, locale = 'en' }\n  ) => {\n    const menuItemsArray = Array.from(menuItems);\n\n    const sortedArray = menuItemsArray.sort((itemA, itemB) => {\n      const hasItemA = values.includes((itemA as HTMLInputElement).value);\n      const hasItemB = values.includes((itemB as HTMLInputElement).value);\n\n      // Prefer whichever item is in the `value` array first\n      if (hasItemA && !hasItemB) {\n        return -1;\n      }\n\n      if (hasItemB && !hasItemA) {\n        return 1;\n      }\n\n      return compareItems(\n        (itemA as HTMLInputElement).value,\n        (itemB as HTMLInputElement).value,\n        {\n          locale,\n        }\n      );\n    });\n\n    return sortedArray;\n  };\n\n  shouldUpdate(changedProperties) {\n    const { selectorItem, aiLabelItem, slugItem } = this\n      .constructor as typeof CDSMultiSelect;\n    const aiLabel =\n      this.querySelector(aiLabelItem) || this.querySelector(slugItem);\n    const items = this.querySelectorAll(selectorItem);\n\n    const { value, locale } = this;\n    const values = !value ? [] : value.split(',');\n\n    if (changedProperties.has('size')) {\n      forEach(this.querySelectorAll(selectorItem), (elem) => {\n        (elem as CDSMultiSelectItem).size = this.size;\n      });\n    }\n    if (changedProperties.has('value')) {\n      // Updates selection beforehand because our rendering logic for `<cds-multi-select>` looks for selected items via `qSA()`\n      forEach(items, (elem) => {\n        (elem as CDSMultiSelectItem).selected =\n          values.indexOf((elem as CDSMultiSelectItem).value) >= 0;\n      });\n      this._selectedItemsCount = filter(\n        items,\n        (elem) =>\n          values.indexOf((elem as CDSMultiSelectItem).value) >= 0 &&\n          !(elem as CDSMultiSelectItem).isSelectAll\n      ).length;\n\n      if (this.selectionFeedback === SELECTION_FEEDBACK_OPTION.TOP) {\n        const sortedMenuItems = this.sortItems(items, {\n          values,\n          compareItems: this.compareItems,\n          locale,\n        });\n\n        aiLabel ? sortedMenuItems.unshift(aiLabel as Node) : '';\n        // @todo remove typecast once we've updated to Typescript.\n        (this as any).replaceChildren(...sortedMenuItems);\n      }\n    }\n    if (changedProperties.has('open')) {\n      if (\n        this.selectionFeedback === SELECTION_FEEDBACK_OPTION.TOP_AFTER_REOPEN\n      ) {\n        const sortedMenuItems = this.sortItems(items, {\n          values,\n          compareItems: this.compareItems,\n          locale,\n        });\n\n        aiLabel ? sortedMenuItems.unshift(aiLabel as Node) : '';\n        // @todo remove typecast once we've updated to Typescript.\n        sortedMenuItems.forEach((item) => {\n          this.appendChild(item);\n        });\n      }\n    }\n    return true;\n  }\n\n  updated(changedProperties) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has('open') && this.open) {\n      const selectedItems = Array.from(\n        this.querySelectorAll(`${prefix}-multi-select-item[selected]`)\n      ) as CDSMultiSelectItem[];\n\n      if (selectedItems.length > 0) {\n        let itemToFocus: HTMLElement | null = null;\n        if (this.selectAll) {\n          itemToFocus = this.querySelector(\n            `${prefix}-multi-select-item[is-select-all]`\n          ) as CDSMultiSelectItem;\n        }\n        if (!itemToFocus) {\n          itemToFocus = selectedItems[0] as HTMLElement;\n        }\n        this.setAttribute('item-clicked', '');\n        itemToFocus.focus();\n        itemToFocus.setAttribute('highlighted', '');\n      } else {\n        this.filterable\n          ? this._filterInputNode.focus()\n          : this._triggerNode.focus();\n      }\n    }\n    // reorder items so that select all is always at the top of the list\n    if (this.selectAll && changedProperties.has('open') && this.open) {\n      const items = Array.from(\n        this.querySelectorAll('cds-multi-select-item')\n      ) as CDSMultiSelectItem[];\n\n      const selectAllItem = items.find((i) => i.isSelectAll);\n      if (selectAllItem) {\n        this.appendChild(selectAllItem);\n        items\n          .filter((i) => i !== selectAllItem)\n          .forEach((i) => this.appendChild(i));\n      }\n    }\n\n    // flush the top of the first element\n    Array.from(this.querySelectorAll('cds-multi-select-item')).forEach(\n      (item, index) => {\n        if (index === 0 && !item.hasAttribute('is-select-all')) {\n          item.setAttribute('flush-top', '');\n        } else if (index === 1 && this.selectAll) {\n          item.setAttribute('flush-top', '');\n        } else {\n          item.removeAttribute('flush-top');\n        }\n      }\n    );\n\n    if (changedProperties.has('open') && !this.open) {\n      this._triggerNode.classList.remove('no-focus-style');\n      this.removeAttribute('item-clicked');\n    }\n  }\n\n  firstUpdated(changedProperties) {\n    super.firstUpdated?.(changedProperties);\n\n    // whenever more items are added/removed, recompute the state of the select all option\n    if (!this.selectAll) return;\n    const defaultSlot =\n      this.shadowRoot!.querySelector<HTMLSlotElement>('slot:not([name])')!;\n    defaultSlot.addEventListener('slotchange', () =>\n      this._computeSelectAllState()\n    );\n  }\n\n  /**\n   * Computes the state of the select all option and sets it to either\n   * 'selected' or 'indeterminate'\n   */\n  private _computeSelectAllState() {\n    if (!this.selectAll) return;\n\n    const allItems = Array.from(\n      this.querySelectorAll(\n        (this.constructor as typeof CDSMultiSelect).selectorItem\n      )\n    ) as CDSMultiSelectItem[];\n    const selectAllItem = allItems.find((i) => i.isSelectAll);\n    if (!selectAllItem) {\n      return;\n    }\n    const enabledItems = allItems.filter((i) => !i.isSelectAll && !i.disabled);\n    const selectedCount = enabledItems.filter((i) => i.selected).length;\n    const allSelected = selectedCount === enabledItems.length;\n\n    selectAllItem.selected = allSelected;\n    selectAllItem.indeterminate = selectedCount > 0 && !allSelected;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    /**\n     * Detect if multi-select already has initially selected items\n     */\n    this.value = filter(\n      this.querySelectorAll(\n        (this.constructor as typeof CDSMultiSelect).selectorItem\n      ),\n      (item) => (item as CDSMultiSelectItem).selected\n    )\n      .map((item) => (item as CDSMultiSelectItem).value)\n      .join(',');\n  }\n\n  /**\n   * A selector that will return menu body.\n   */\n  static get selectorMenuBody() {\n    return `div[part=\"menu-body\"]`;\n  }\n\n  /**\n   * A selector that will return highlighted items.\n   */\n  static get selectorItemHighlighted() {\n    return `${prefix}-multi-select-item[highlighted]`;\n  }\n\n  /**\n   * A selector that will return multi select items.\n   * We use a separate property from `.itemTagName` due to the nature in difference of tag name vs. selector.\n   */\n  static get selectorItem() {\n    return `${prefix}-multi-select-item`;\n  }\n\n  /**\n   * A selector that will return remaining items after a filter.\n   */\n  static get selectorItemFiltered() {\n    return `${prefix}-multi-select-item[filtered]`;\n  }\n\n  /**\n   * A selector that will return remaining items after a filter.\n   */\n  static get selectorItemResults() {\n    return `${prefix}-multi-select-item:not([filtered])`;\n  }\n\n  /**\n   * A selector that will return selected items.\n   */\n  static get selectorItemSelected() {\n    return `${prefix}-multi-select-item[selected]`;\n  }\n\n  /**\n   * The name of the custom event fired before this multi select item is being toggled upon a user gesture.\n   * Cancellation of this event stops the user-initiated action of toggling this multi select item.\n   */\n  static get eventBeforeToggle() {\n    return `${prefix}-multi-select-beingtoggled`;\n  }\n\n  /**\n   * The name of the custom event fired after this multi select item is toggled upon a user gesture.\n   */\n  static get eventToggle() {\n    return `${prefix}-multi-select-toggled`;\n  }\n\n  /**\n   * The name of the custom event fired before a multi select item is selected upon a user gesture.\n   * Cancellation of this event stops changing the user-initiated selection.\n   */\n  static get eventBeforeSelect() {\n    return `${prefix}-multi-select-beingselected`;\n  }\n\n  /**\n   * The name of the custom event fired after a a multi select item is selected upon a user gesture.\n   */\n  static get eventSelect() {\n    return `${prefix}-multi-select-selected`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSMultiSelect;\n"],"names":["customElement"],"mappings":"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"}