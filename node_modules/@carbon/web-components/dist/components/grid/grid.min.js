/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as o}from"../../node_modules/lit-element/lit-element.min.js";import{provide as r}from"../../node_modules/@lit/context/lib/decorators/provide.min.js";import{consume as i}from"../../node_modules/@lit/context/lib/decorators/consume.min.js";import{gridContext as s}from"./grid-context.min.js";import{property as n}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{carbonElement as d}from"../../globals/decorators/carbon-element.min.js";import{prefix as l}from"../../globals/settings.min.js";import m from"./grid.scss.min.js";import{SUB_GRID_MODE as p}from"./defs.min.js";export{GRID_ALIGNMENT}from"./defs.min.js";
/**
 * @license
 *
 * Copyright IBM Corp. 2024, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */let a=class extends o{constructor(){super(...arguments),this.condensed=!1,this.narrow=!1,this.fullWidth=!1,this.gridContext={subgrid:!1}}render(){var t;if(this.gridContext={subgrid:!0},null===(t=this.gridContextIn)||void 0===t?void 0:t.subgrid){let t=p.WIDE;return this.narrow?t=p.NARROW:this.condensed&&(t=p.CONDENSED),e`<div subgrid mode=${t} part="grid">
        <slot></slot>
      </div> `}return e`<div grid part="grid">
        <slot></slot>
      </div> `}};a.styles=m,t([n({reflect:!0,type:String})],a.prototype,"align",void 0),t([n({reflect:!0,type:Boolean})],a.prototype,"condensed",void 0),t([n({reflect:!0,type:Boolean})],a.prototype,"narrow",void 0),t([n({reflect:!0,attribute:"full-width",type:Boolean})],a.prototype,"fullWidth",void 0),t([i({context:s,subscribe:!0}),n({attribute:!1})],a.prototype,"gridContextIn",void 0),t([r({context:s}),n({attribute:!1})],a.prototype,"gridContext",void 0),a=t([d(`${l}-grid`)],a);
