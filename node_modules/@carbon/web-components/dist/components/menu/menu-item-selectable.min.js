/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as e}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as t}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as o}from"../../node_modules/lit-element/lit-element.min.js";import{property as s}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{prefix as n}from"../../globals/settings.min.js";import i from"./menu-item.scss.min.js";import{carbonElement as l}from"../../globals/decorators/carbon-element.min.js";import{consume as r}from"../../node_modules/@lit/context/lib/decorators/consume.min.js";import{MenuContext as c}from"./menu-context.min.js";let m=class extends o{constructor(){super(...arguments),this.selected=!1,this._handleClick=e=>{this.selected=!this.selected;const t={bubbles:!0,cancelable:!0,composed:!0,detail:{triggeredBy:e.target}};this.dispatchEvent(new CustomEvent(this.constructor.eventOnChange,t))&&this.dispatchEvent(new CustomEvent(this.constructor.eventOnChange,t))},this._handleKeydown=e=>{"Enter"!==e.key&&" "!==e.key||this._handleClick(e)}}static get eventOnChange(){return`${n}-item-changed`}connectedCallback(){super.connectedCallback(),this.addEventListener("keydown",this._handleKeydown)}firstUpdated(){var e;const t=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(`${n}-menu-item`);t&&t.addEventListener("keydown",this._handleKeydown),this.setAttribute("tabindex","-1"),this.context.updateFromChild({hasSelectableItems:!0})}render(){const{label:e,selected:o,_handleClick:s}=this;return t`
      <cds-menu-item
        label="${e}"
        class="${n}--menu-item-selectable--selected"
        role="menuitemcheckbox"
        shortcut=${this.shortcut}
        aria-checked="${o}"
        @click="${s}">
        <slot slot="render-icon" name="render-icon"></slot>
      </cds-menu-item>
    `}};m.shadowRootOptions=Object.assign(Object.assign({},o.shadowRootOptions),{delegatesFocus:!0}),m.styles=i,e([r({context:c})],m.prototype,"context",void 0),e([s({type:String})],m.prototype,"label",void 0),e([s({type:Boolean})],m.prototype,"selected",void 0),e([s()],m.prototype,"renderIcon",void 0),e([s()],m.prototype,"shortcut",void 0),m=e([l(`${n}-menu-item-selectable`)],m);
