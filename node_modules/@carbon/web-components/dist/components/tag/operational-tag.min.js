/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as o}from"../../node_modules/lit-element/lit-element.min.js";import{property as s}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{state as i}from"../../node_modules/@lit/reactive-element/decorators/state.min.js";import{prefix as l}from"../../globals/settings.min.js";import r from"../../globals/mixins/focus.min.js";import n from"../../globals/decorators/host-listener.min.js";import a from"../../globals/mixins/host-listener.min.js";import{TAG_SIZE as d,TAG_TYPE as p}from"./defs.min.js";import"./tag.min.js";import"../tooltip/tooltip.min.js";import"../tooltip/tooltip-content.min.js";import"../tooltip/definition-tooltip.min.js";import m from"./tag.scss.min.js";import{carbonElement as c}from"../../globals/decorators/carbon-element.min.js";
/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2025
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */let h=class extends(a(r(o))){constructor(){super(...arguments),this.triggerEvents=t=>{if(this.disabled)t.stopPropagation();else{const e={bubbles:!0,cancelable:!0,composed:!0,detail:{triggeredBy:t.target}};this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeSelected,e))&&(this.selected=!this.selected,this.dispatchEvent(new CustomEvent(this.constructor.eventSelected,e)))}},this._handleClick=t=>{this.triggerEvents(t)},this._handleKeyDown=t=>{"Enter"!==t.key&&" "!==t.key||this.triggerEvents(t)},this.disabled=!1,this.selected=!1,this.size=d.MEDIUM,this.text="",this.type=p.GRAY,this._hasEllipsisApplied=!1}async updated(){var t,e,o;await this.updateComplete;const s=null===(o=null===(e=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector(`${l}-tag`))||void 0===e?void 0:e.shadowRoot)||void 0===o?void 0:o.querySelector(`.${l}--tag__label`);if(!s)return;const i=s.scrollWidth>s.clientWidth;this._hasEllipsisApplied=i}render(){const{disabled:t,selected:o,size:s,text:i,type:l,_hasEllipsisApplied:r}=this;return e` ${r?e` <cds-tooltip
          align="bottom"
          keyboard-only
          closeOnActivation
          leave-delay-ms=${0}>
          <cds-tag
            ?aria-pressed="${o}"
            size="${s}"
            ?disabled="${t}"
            type="${l}">
            <slot name="icon" slot="icon"></slot>
            ${i}
            <slot name="decorator" slot="decorator"></slot>
            <slot name="ai-label" slot="ai-label"></slot>
            <slot name="slug" slot="slug"></slot>
          </cds-tag>
          <cds-tooltip-content id="content"> ${i} </cds-tooltip-content>
        </cds-tooltip>`:e`
          <cds-tag
            ?aria-pressed="${o}"
            size="${s}"
            ?disabled="${t}"
            type="${l}">
            <slot name="icon" slot="icon"></slot>
            ${i}
            <slot name="decorator" slot="decorator"></slot>
            <slot name="ai-label" slot="ai-label"></slot>
            <slot name="slug" slot="slug"></slot>
          </cds-tag>
        `}`}static get eventBeforeSelected(){return`${l}-operational-tag-beingselected`}static get eventSelected(){return`${l}-operational-tag-selected`}};h.styles=m,t([n("shadowRoot:click")],h.prototype,"_handleClick",void 0),t([n("shadowRoot:keydown")],h.prototype,"_handleKeyDown",void 0),t([s({type:Boolean,reflect:!0})],h.prototype,"disabled",void 0),t([s({type:Boolean,reflect:!0})],h.prototype,"selected",void 0),t([s({type:String,reflect:!0})],h.prototype,"size",void 0),t([s({type:String,reflect:!0})],h.prototype,"text",void 0),t([s({reflect:!0})],h.prototype,"type",void 0),t([i()],h.prototype,"_hasEllipsisApplied",void 0),h=t([c(`${l}-operational-tag`)],h);export{d as TAG_SIZE,p as TAG_TYPE};
