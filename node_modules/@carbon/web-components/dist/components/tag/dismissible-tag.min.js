/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import"../../node_modules/lit-element/lit-element.min.js";import{property as o}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{query as i}from"../../node_modules/@lit/reactive-element/decorators/query.min.js";import s from"../../packages/icons/lib/close/16.min.js";import{prefix as l}from"../../globals/settings.min.js";import n from"../../globals/mixins/focus.min.js";import r from"../../globals/decorators/host-listener.min.js";import a from"../../globals/mixins/host-listener.min.js";import{TAG_SIZE as m,TAG_TYPE as d}from"./defs.min.js";import p from"./tag.min.js";import"../tooltip/tooltip.min.js";import"../tooltip/tooltip-content.min.js";import"../tooltip/definition-tooltip.min.js";import c from"./tag.scss.min.js";import{carbonElement as g}from"../../globals/decorators/carbon-element.min.js";
/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2025
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */let b=class extends(a(n(p))){constructor(){super(...arguments),this._handleClick=t=>{if(t.composedPath().indexOf(this._buttonNode)>=0)if(this.disabled)t.stopPropagation();else if(this.open){const e=this._findNextFocusableTag(),o={bubbles:!0,cancelable:!0,composed:!0,detail:{triggeredBy:t.target}};if(this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeClose,o))){if(this.open=!1,e){const t=e._buttonNode;t&&t.focus()}this.dispatchEvent(new CustomEvent(this.constructor.eventClose,o))}}},this.disabled=!1,this.open=!0,this.size=m.MEDIUM,this.tagTitle="",this.text="",this.type=d.GRAY}_findNextFocusableTag(){let t=this.nextElementSibling;for(;t;){if(t.tagName.toLowerCase()===`${l}-dismissible-tag`&&!t.hasAttribute("disabled")&&"false"!==t.getAttribute("open"))return t;t=t.nextElementSibling}return null}_handleAILabelSlotChange({target:t}){const e=t.assignedNodes().filter((t=>void 0!==t.matches&&(t.matches(this.constructor.aiLabelItem)||t.matches(this.constructor.slugItem))));e.length>0&&(e[0].setAttribute("tag",`${this.type}`),e[0].setAttribute("size","sm"),e[0].setAttribute("kind","inline")),this.requestUpdate()}render(){const{disabled:t,_handleAILabelSlotChange:o,_handleIconSlotChange:i,_hasEllipsisApplied:n,size:r,tagTitle:a,text:d,dismissTooltipLabel:p}=this,c=p||(n?`Dismiss "${d}"`:"Dismiss");return e`
      ${r!==m.SMALL?e`<slot name="icon" @slotchange="${i}"></slot>`:""}
      <div class="${l}--interactive--tag-children">
        <span
          title="${a||d}"
          class="${l}--tag__label">
          ${d}
        </span>
        <slot name="decorator" @slotchange="${o}"></slot>
        <slot name="ai-label" @slotchange="${o}"></slot>
        <slot name="slug" @slotchange="${o}"></slot>
        <cds-tooltip align="bottom" enter-delay-ms=${0}>
          <button
            class="sb-tooltip-trigger"
            role="button"
            aria-labelledby="content"
            class="${l}--tag__close-icon"
            ?disabled=${t}>
            ${s()}
          </button>
          <cds-tooltip-content id="content">
            ${c}
          </cds-tooltip-content>
        </cds-tooltip>
      </div>
    `}static get slugItem(){return`${l}-slug`}static get aiLabelItem(){return`${l}-ai-label`}static get eventBeforeClose(){return`${l}-dismissible-tag-beingclosed`}static get eventClose(){return`${l}-dismissible-tag-closed`}};b.styles=c,t([i("button")],b.prototype,"_buttonNode",void 0),t([r("shadowRoot:click")],b.prototype,"_handleClick",void 0),t([o({type:Boolean,reflect:!0})],b.prototype,"disabled",void 0),t([o({type:String,attribute:"dismiss-tooltip-label",reflect:!0})],b.prototype,"dismissTooltipLabel",void 0),t([o({type:Boolean,reflect:!0})],b.prototype,"open",void 0),t([o({type:String,reflect:!0})],b.prototype,"size",void 0),t([o({type:String,attribute:"tag-title",reflect:!0})],b.prototype,"tagTitle",void 0),t([o({type:String,reflect:!0})],b.prototype,"text",void 0),t([o({reflect:!0})],b.prototype,"type",void 0),b=t([g(`${l}-dismissible-tag`)],b);export{m as TAG_SIZE,d as TAG_TYPE};
