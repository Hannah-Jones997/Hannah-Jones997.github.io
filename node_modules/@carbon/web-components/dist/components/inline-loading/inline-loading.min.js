/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as i}from"../../node_modules/lit-element/lit-element.min.js";import{property as s}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{classMap as o}from"../../node_modules/lit-html/directives/class-map.min.js";import n from"../../packages/icons/lib/checkmark--filled/16.min.js";import r from"../../packages/icons/lib/error--filled/16.min.js";import{prefix as l}from"../../globals/settings.min.js";import c from"../loading/loading-icon.min.js";import{INLINE_LOADING_STATE as a}from"./defs.min.js";import m from"./inline-loading.scss.min.js";import{carbonElement as d}from"../../globals/decorators/carbon-element.min.js";let p=class extends i{constructor(){super(...arguments),this.iconDescription="Loading",this.successDelay=1500,this.status=a.ACTIVE}get assistiveText(){return this.iconDescription}set assistiveText(t){this.iconDescription=t}_renderIcon(){const{iconDescription:t,status:i}=this;if(i===a.ERROR)return r({class:`${l}--inline-loading--error`,children:e`<title>${t}</title>`});const s={bubbles:!0,cancelable:!0,composed:!0};if(i===a.FINISHED)return setTimeout((()=>{this.dispatchEvent(new CustomEvent(this.constructor.eventOnSuccess,s))}),this.successDelay),n({class:`${l}--inline-loading__checkmark-container`,children:e`<title>${t}</title>`});if(i===a.INACTIVE||i===a.ACTIVE){const s=o({[`${l}--loading`]:!0,[`${l}--loading--small`]:!0,[`${l}--loading--stop`]:i===a.INACTIVE});return e`
        <div class="${s}">
          ${c({description:t,small:!0})}
        </div>
      `}}static get eventOnSuccess(){return`${l}-inline-loading-onsuccess`}connectedCallback(){this.hasAttribute("aria-live")||this.setAttribute("aria-live","assertive"),super.connectedCallback()}render(){const t=this._renderIcon(),i=t?e`
          <div class="${l}--inline-loading__animation">
            ${t}
          </div>
        `:void 0;return e`
      ${i}
      <p class="${l}--inline-loading__text"><slot></slot></p>
    `}};p.styles=m,t([s({attribute:"assistive-text"})],p.prototype,"assistiveText",null),t([s({attribute:"icon-description"})],p.prototype,"iconDescription",void 0),t([s({attribute:"success-delay"})],p.prototype,"successDelay",void 0),t([s({reflect:!0})],p.prototype,"status",void 0),p=t([d(`${l}-inline-loading`)],p);export{a as INLINE_LOADING_STATE};
