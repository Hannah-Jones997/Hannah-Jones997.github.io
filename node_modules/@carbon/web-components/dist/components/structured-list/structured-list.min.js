/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as e}from"../../node_modules/tslib/tslib.es6.min.js";import{classMap as t}from"../../node_modules/lit-html/directives/class-map.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as s}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as o}from"../../node_modules/lit-element/lit-element.min.js";import{property as r}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{prefix as l}from"../../globals/settings.min.js";import{forEach as i}from"../../globals/internal/collection-helpers.min.js";import n from"../../globals/mixins/focus.min.js";import c from"./structured-list.scss.min.js";import{carbonElement as m}from"../../globals/decorators/carbon-element.min.js";let a=class extends(n(o)){constructor(){super(...arguments),this.selectionName="",this.condensed=!1,this.flush=!1}connectedCallback(){this.hasAttribute("role")||this.setAttribute("role","table"),super.connectedCallback()}shouldUpdate(e){return e.has("selectionName")&&i(this.querySelectorAll(this.constructor.selectorRowsWithHeader),(e=>{e.selectionName=this.selectionName})),!0}updated(e){["condensed","flush"].forEach((t=>{e.has(t)&&i(this.querySelectorAll(this.constructor.selectorRowsWithHeader),(e=>{this[`${t}`]?e.setAttribute(t,""):e.removeAttribute(t)}))}))}render(){const{condensed:e,flush:o,selectionName:r}=this,i=t({[`${l}--structured-list`]:!0,[`${l}--structured-list--selection`]:Boolean(r),[`${l}--structured-list--condensed`]:e,[`${l}--structured-list--flush`]:o});return s`
      <section id="section" class=${i}><slot></slot></section>
    `}};a.selectorRowsWithHeader=`${l}-structured-list-row,${l}-structured-list-header-row`,a.shadowRootOptions=Object.assign(Object.assign({},o.shadowRootOptions),{delegatesFocus:!0}),a.styles=c,e([r({attribute:"selection-name"})],a.prototype,"selectionName",void 0),e([r({type:Boolean,reflect:!0})],a.prototype,"condensed",void 0),e([r({type:Boolean,reflect:!0})],a.prototype,"flush",void 0),a=e([m(`${l}-structured-list`)],a);
