/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as e}from"../../node_modules/tslib/tslib.es6.min.js";import{classMap as t}from"../../node_modules/lit-html/directives/class-map.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as o}from"../../node_modules/lit-html/lit-html.min.js";import"../../node_modules/lit-element/lit-element.min.js";import{property as i}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{query as l}from"../../node_modules/@lit/reactive-element/decorators/query.min.js";import{ifDefined as s}from"../../node_modules/lit-html/directives/if-defined.min.js";import{prefix as a}from"../../globals/settings.min.js";import r from"../checkbox/checkbox.min.js";import{TOGGLE_SIZE as n}from"./defs.min.js";import d from"./toggle.scss.min.js";import m from"../../globals/decorators/host-listener.min.js";import c from"../../globals/mixins/host-listener.min.js";import{carbonElement as h}from"../../globals/decorators/carbon-element.min.js";let p=class extends(c(r)){constructor(){super(...arguments),this._handleKeydown=async e=>{const{key:t}=e;" "===t&&this._handleChange()},this.labelA="",this.hideLabel=!1,this.readOnly=!1,this.size=n.REGULAR,this.labelB=""}_handleChange(){const{checked:e,indeterminate:t}=this._checkboxNode;if(this.disabled||this.readOnly)return;this.checked=!e,this.indeterminate=t;const{eventChange:o}=this.constructor;this.dispatchEvent(new CustomEvent(o,{bubbles:!0,composed:!0,detail:{indeterminate:t}}))}_renderCheckmark(){if(this.size===n.SMALL)return o`
      <svg
        class="${a}--toggle__check"
        width="6px"
        height="5px"
        viewBox="0 0 6 5">
        <path d="M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z" />
      </svg>
    `}render(){const{checked:e,disabled:i,labelText:l,hideLabel:r,id:n,name:d,size:m,labelA:c,labelB:h,value:p,_handleChange:b}=this,g=t({[`${a}--toggle__appearance`]:!0,[`${a}--toggle__appearance--${m}`]:m}),_=t({[`${a}--toggle__switch`]:!0,[`${a}--toggle__switch--checked`]:e}),u=t({[`${a}--toggle__label-text`]:l}),$=e?c:h;return o`
      <button
        class="${a}--toggle__button"
        role="switch"
        type="button"
        aria-checked=${e}
        aria-lable=${l}
        .checked="${e}"
        name="${s(d)}"
        value="${s(p)}"
        ?disabled=${i}
        id="${n}"></button>
      <label for="${n}" class="${a}--toggle__label">
        ${l?o`<span class="${u}">${l}</span>`:null}
        <div class="${g}">
          <div class="${_}" @click=${b}>
            ${this._renderCheckmark()}
          </div>
          <span
            ?hidden="${r}"
            class="${a}--toggle__text"
            aria-hidden="true"
            >${$}</span
          >
        </div>
      </label>
    `}static get eventChange(){return`${a}-toggle-changed`}};p.styles=d,e([l("button")],p.prototype,"_checkboxNode",void 0),e([m("keydown")],p.prototype,"_handleKeydown",void 0),e([i({attribute:"label-a"})],p.prototype,"labelA",void 0),e([i({reflect:!0,type:Boolean})],p.prototype,"hideLabel",void 0),e([i({reflect:!0,attribute:"read-only",type:Boolean})],p.prototype,"readOnly",void 0),e([i({reflect:!0})],p.prototype,"size",void 0),e([i({attribute:"label-b"})],p.prototype,"labelB",void 0),p=e([h(`${a}-toggle`)],p);export{n as TOGGLE_SIZE};
