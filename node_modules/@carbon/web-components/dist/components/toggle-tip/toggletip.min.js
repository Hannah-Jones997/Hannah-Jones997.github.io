/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import{classMap as e}from"../../node_modules/lit-html/directives/class-map.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as o}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as s}from"../../node_modules/lit-element/lit-element.min.js";import{property as n}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{carbonElement as i}from"../../globals/decorators/carbon-element.min.js";import l from"../../packages/icons/lib/information/16.min.js";import{prefix as r}from"../../globals/settings.min.js";import a from"../../globals/decorators/host-listener.min.js";import p from"../../globals/mixins/host-listener.min.js";import c from"../../globals/mixins/focus.min.js";import{POPOVER_ALIGNMENT as m}from"../popover/defs.min.js";import d from"../../globals/controllers/floating-controller.min.js";import g from"./toggletip.scss.min.js";var h;let u=h=class extends(p(c(s))){constructor(){super(...arguments),this.popoverController=new d(this),this.alignment=m.TOP,this.alignmentAxisOffset=0,this.autoalign=!1,this.buttonLabel="Show information",this.open=!1,this.defaultOpen=!1,this._handleClick=()=>{this.open=!this.open},this._handleKeydown=async t=>{"Escape"===t.key&&(this.open=!1)},this._renderToggleTipLabel=()=>o`
      <span class="${r}--toggletip-label">
        <slot></slot>
      </span>
    `,this._renderTooltipButton=()=>o`
      <button
        aria-controls="${this.id}"
        aria-label="${this.buttonLabel}"
        class="${r}--toggletip-button"
        @click=${this._handleClick}>
        <slot name="trigger">${l({id:"trigger"})}</slot>
      </button>
    `,this._renderTooltipContent=()=>this.autoalign?o`
          <span class="${r}--popover-content">
            <div class="${r}--toggletip-content">
              <slot name="body-text"></slot>
              <div class="${r}--toggletip-actions">
                <slot
                  name="actions"
                  @slotchange="${this._handleActionsSlotChange}"></slot>
              </div>
            </div>
            <span class="${r}--popover-caret"></span>
          </span>
        `:o`
          <span class="${r}--popover">
            <span class="${r}--popover-content">
              <div class="${r}--toggletip-content">
                <slot name="body-text"></slot>
                <div class="${r}--toggletip-actions">
                  <slot
                    name="actions"
                    @slotchange="${this._handleActionsSlotChange}"></slot>
                </div>
              </div>
            </span>
            <span class="${r}--popover-caret"></span>
          </span>
        `,this._renderInnerContent=()=>o`
      ${this._renderTooltipButton()} ${this._renderTooltipContent()}
    `}connectedCallback(){super.connectedCallback(),this.defaultOpen&&!this.hasAttribute("open")&&(this.open=!0)}_handleActionsSlotChange({target:t}){t.assignedNodes()?this.setAttribute("has-actions",""):this.removeAttribute("has-actions")}_handleFocusOut(t){this.contains(t.relatedTarget)||(this.open=!1)}updated(){var t,e,o,s;if(this.autoalign){const n=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector(h.selectorToggletipButton),i=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(h.selectorToggletipContent),l=null===(o=this.shadowRoot)||void 0===o?void 0:o.querySelector(h.selectorToggletipCaret);n&&i&&(n.scrollIntoView({block:"center",inline:"center"}),null===(s=this.popoverController)||void 0===s||s.setPlacement({trigger:n,target:i,arrowElement:l,caret:!0,flipArguments:{fallbackAxisSideDirection:"start"},alignment:this.alignment,open:this.open,alignmentAxisOffset:this.alignmentAxisOffset}))}}render(){const{alignment:t,open:s}=this,n=e({[`${r}--popover-container`]:!0,[`${r}--popover--caret`]:!0,[`${r}--popover--high-contrast`]:!0,[`${r}--popover--open`]:s,[`${r}--popover--${t}`]:t,[`${r}--toggletip`]:!0,[`${r}--toggletip--open`]:s});return o`
      ${this._renderToggleTipLabel()}
      <span class="${n}"> ${this._renderInnerContent()} </span>
    `}static get selectorToggletipContent(){return`.${r}--popover-content`}static get selectorToggletipCaret(){return`.${r}--popover-caret`}static get selectorToggletipButton(){return`.${r}--toggletip-button`}};u.shadowRootOptions=Object.assign(Object.assign({},s.shadowRootOptions),{delegatesFocus:!0}),u.styles=g,t([n({reflect:!0})],u.prototype,"alignment",void 0),t([n({type:Number,attribute:"alignment-axis-offset"})],u.prototype,"alignmentAxisOffset",void 0),t([n({type:Boolean,reflect:!0})],u.prototype,"autoalign",void 0),t([n({attribute:"button-label"})],u.prototype,"buttonLabel",void 0),t([n({type:Boolean,reflect:!0})],u.prototype,"open",void 0),t([n({type:Boolean,attribute:"default-open"})],u.prototype,"defaultOpen",void 0),t([a("keydown")],u.prototype,"_handleKeydown",void 0),t([a("focusout")],u.prototype,"_handleFocusOut",null),u=h=t([i(`${r}-toggletip`)],u);var v=u;export{v as default};
