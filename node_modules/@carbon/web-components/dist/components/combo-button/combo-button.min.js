/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as o}from"../../node_modules/lit-element/lit-element.min.js";import{property as i}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{query as n}from"../../node_modules/@lit/reactive-element/decorators/query.min.js";import{prefix as s}from"../../globals/settings.min.js";import m from"../../globals/decorators/host-listener.min.js";import r from"../../globals/mixins/host-listener.min.js";import{carbonElement as l}from"../../globals/decorators/carbon-element.min.js";import p from"./combo-button.scss.min.js";import"../button/button.min.js";import"../button/button-set.min.js";import"../button/button-skeleton.min.js";import"../menu/menu.min.js";import"../menu/menu-item.min.js";import"../menu/menu-item-divider.min.js";import"../menu/menu-item-group.min.js";import"../menu/menu-item-selectable.min.js";import"../menu/menu-item-radio-group.min.js";import"../icon-button/icon-button.min.js";import d from"../../packages/icons/lib/chevron--down/16.min.js";import{COMBO_BUTTON_SIZE as u}from"./defs.min.js";export{COMBO_BUTTON_TOOLTIP_ALIGNMENT}from"./defs.min.js";import{POPOVER_ALIGNMENT as a}from"../popover/defs.min.js";import{ICON_BUTTON_TOOLTIP_ALIGNMENT as c}from"../icon-button/defs.min.js";import h from"../../globals/controllers/floating-controller.min.js";let b=class extends(r(o)){constructor(){super(...arguments),this._menuController=new h(this),this._open=!1,this.menuAlignment=a.TOP,this.size=u.LARGE,this.tooltipAlignment=c.TOP,this.tooltipContent="Additional actions",this._handleClick=t=>{var e;t.composedPath().includes(this._triggerNode)?this._open=!this._open:this._open&&(this._open=!1),"CDS-MENU-ITEM"===t.target.tagName&&(null===(e=this.onClick)||void 0===e||e.call(this,t))},this._handleBlur=({relatedTarget:t})=>{this.contains(t)||(this._open=!1)}}updated(t){const e=this.querySelector(`${s}-menu`);(t.has("_open")||t.has("menuAlignment"))&&this.updateComplete.then((()=>{var t;const o=null===(t=e.shadowRoot)||void 0===t?void 0:t.querySelector(`.${s}--menu`);e.open=this._open,this._menuController.setPlacement({trigger:this,target:e,alignment:this.menuAlignment,styleElement:o,matchWidth:!0,open:this._open})})),t.has("size")&&e.setAttribute("size",this.size)}render(){const{size:t,disabled:o,label:i,tooltipAlignment:n,menuAlignment:s,onClick:m}=this;return e`
      <cds-button size=${t} ?disabled=${o} @click=${m}>
        ${i}
      </cds-button>
      <cds-icon-button
        size=${t}
        ?disabled=${o}
        align=${n}
        menu-alignment=${s}
        part="trigger">
        ${d({slot:"icon"})}
        <span slot="tooltip-content">${this.tooltipContent}</span>
      </cds-icon-button>
      <slot></slot>
    `}};b.styles=p,t([n(`${s}-icon-button`)],b.prototype,"_triggerNode",void 0),t([n(`${s}-menu`)],b.prototype,"_menuNode",void 0),t([i({type:Boolean,reflect:!0})],b.prototype,"_open",void 0),t([i({type:Boolean,reflect:!0})],b.prototype,"disabled",void 0),t([i()],b.prototype,"label",void 0),t([i({reflect:!0,type:String,attribute:"menu-alignment"})],b.prototype,"menuAlignment",void 0),t([i({type:Function})],b.prototype,"onClick",void 0),t([i({type:u,reflect:!0})],b.prototype,"size",void 0),t([i({reflect:!0,attribute:"tooltip-alignment"})],b.prototype,"tooltipAlignment",void 0),t([i({type:String,attribute:"tooltip-content"})],b.prototype,"tooltipContent",void 0),t([m("click")],b.prototype,"_handleClick",void 0),t([m("focusout")],b.prototype,"_handleBlur",void 0),b=t([l(`${s}-combo-button`)],b);export{u as COMBO_BUTTON_SIZE};
