/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import e from"../../packages/icons/lib/checkmark--filled/20.min.js";import i from"../../packages/icons/lib/close/16.min.js";import o from"../../packages/icons/lib/error--filled/20.min.js";import s from"../../packages/icons/lib/information--filled/20.min.js";import n from"../../packages/icons/lib/information--square--filled/20.min.js";import l from"../../packages/icons/lib/warning--filled/20.min.js";import r from"../../packages/icons/lib/warning--alt--filled/20.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as a,svg as c}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as m}from"../../node_modules/lit-element/lit-element.min.js";import{property as d}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{ifDefined as p}from"../../node_modules/lit-html/directives/if-defined.min.js";import{prefix as u}from"../../globals/settings.min.js";import{carbonElement as h}from"../../globals/decorators/carbon-element.min.js";import f from"../../globals/mixins/focus.min.js";import{NOTIFICATION_KIND as _,NOTIFICATION_TYPE as b}from"./defs.min.js";import v from"./inline-notification.scss.min.js";const $={[_.SUCCESS]:e,[_.INFO]:s,[_.INFO_SQUARE]:n,[_.WARNING]:l,[_.WARNING_ALT]:r,[_.ERROR]:o};let y=class extends(f(m)){constructor(){super(...arguments),this._timeoutID=null,this._type=b.INLINE,this.hideCloseButton=!1,this.kind=_.SUCCESS,this.lowContrast=!1,this.open=!0,this.timeout=null,this.subtitle="",this.title=""}_cancelTimeout(t){clearTimeout(t),this._timeoutID=null}_initializeTimeout(t){this._timeoutID&&this._cancelTimeout(this._timeoutID),this._timeoutID=setTimeout(this._handleUserOrTimerInitiatedClose.bind(this,null),t)}_handleClickCloseButton({target:t}){this._handleUserOrTimerInitiatedClose(t)}_handleUserOrTimerInitiatedClose(t){if(this.open){const e={bubbles:!0,cancelable:!0,composed:!0,detail:{triggeredBy:t}};this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeClose,e))&&(this.open=!1,this.dispatchEvent(new CustomEvent(this.constructor.eventClose,e)))}}_renderButton(){const{ariaLabel:t,_type:e,_handleClickCloseButton:o}=this;return a`
      <button
        type="button"
        class="${u}--${e}-notification__close-button"
        aria-label=${p(t)}
        title=${p(t)}
        @click="${o}">
        ${i({class:`${u}--${e}-notification__close-icon`})}
      </button>
    `}_renderText(){const{subtitle:t,title:e,_type:i}=this;return a`
      <div class="${u}--${i}-notification__text-wrapper">
        <p class="${u}--${i}-notification__title">
          ${e}<slot name="title"></slot>
        </p>
        <div class="${u}--${i}-notification__subtitle">
          ${t}<slot name="subtitle"></slot>
        </div>
        <slot></slot>
      </div>
    `}_renderIcon(){const{statusIconDescription:t,kind:e,_type:i}=this,{[e]:o}=$;return o?o({class:`${u}--${i}-notification__icon`,children:t?c`<title>${t}</title>`:void 0}):void 0}connectedCallback(){this.hasAttribute("role")||this.setAttribute("role","alert"),super.connectedCallback()}updated(t){const e=t.has("open"),i=t.has("timeout");(e||i)&&(this.open&&this.timeout?this._initializeTimeout(this.timeout):!this.open&&this._timeoutID&&this._cancelTimeout(this._timeoutID))}render(){const{_type:t}=this;return a`
      <div class="${u}--${t}-notification__details">
        ${this._renderIcon()}${this._renderText()}
      </div>
      ${this._renderButton()}
    `}static get eventBeforeClose(){return`${u}-notification-beingclosed`}static get eventClose(){return`${u}-notification-closed`}};y.styles=v,t([d({attribute:"aria-label"})],y.prototype,"ariaLabel",void 0),t([d({type:Boolean,reflect:!0,attribute:"hide-close-button"})],y.prototype,"hideCloseButton",void 0),t([d({attribute:"status-icon-description"})],y.prototype,"statusIconDescription",void 0),t([d({reflect:!0})],y.prototype,"kind",void 0),t([d({type:Boolean,reflect:!0,attribute:"low-contrast"})],y.prototype,"lowContrast",void 0),t([d({type:Boolean,reflect:!0})],y.prototype,"open",void 0),t([d({type:Number,reflect:!0})],y.prototype,"timeout",void 0),t([d()],y.prototype,"subtitle",void 0),t([d()],y.prototype,"title",void 0),y=t([h(`${u}-inline-notification`)],y);var C=y;export{_ as NOTIFICATION_KIND,b as NOTIFICATION_TYPE,C as default};
