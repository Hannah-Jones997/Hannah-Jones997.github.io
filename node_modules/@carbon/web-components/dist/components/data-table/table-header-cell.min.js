/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as s}from"../../node_modules/lit-element/lit-element.min.js";import{property as o}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{classMap as i}from"../../node_modules/lit-html/directives/class-map.min.js";import l from"../../packages/icons/lib/arrows--vertical/32.min.js";import r from"../../packages/icons/lib/arrow--down/32.min.js";import{prefix as a}from"../../globals/settings.min.js";import n from"../../globals/mixins/focus.min.js";import{TABLE_SORT_CYCLES as c,TABLE_SORT_CYCLE as h,TABLE_SORT_DIRECTION as m}from"./defs.min.js";import b from"./data-table.scss.min.js";import{carbonElement as d}from"../../globals/decorators/carbon-element.min.js";let p=class extends(n(s)){constructor(){super(...arguments),this._hasAILabel=!1,this.isExpandable=!1,this.isSelectable=!1,this.isSortable=!1,this.sortActive=!1}_handleClickSortButton(t){if(!t.target.matches(this.constructor.aiLabelItem)&&!t.target.matches(this.constructor.slugItem)){const t=this._getNextSort(),e={bubbles:!0,cancelable:!0,composed:!0,detail:{oldSortDirection:this.sortDirection,sortDirection:t}},s=this.constructor;this.dispatchEvent(new CustomEvent(s.eventBeforeSort,e))&&(this.sortActive=!0,this.sortDirection=t)}}_handleSlotChange(){this.requestUpdate()}_handleAILabelSlotChange({target:t}){const e=t.assignedNodes().filter((t=>void 0!==t.matches&&(t.matches(this.constructor.aiLabelItem)||t.matches(this.constructor.slugItem))));e.length>0&&(this._hasAILabel=Boolean(e),e[0].setAttribute("size","mini")),this.requestUpdate()}_getNextSort(){const{sortCycle:t=h.TRI_STATES_FROM_ASCENDING,sortDirection:e}=this;if(!e)throw new TypeError("Table sort direction is not defined. Likely that `_getNextSort()` is called with non-sorted table column, which should not happen in regular condition.");const s=this.constructor.TABLE_SORT_CYCLES[t],o=s.indexOf(e);if(o<0){if(e===m.NONE)return s[0];throw new RangeError(`The given sort state (${e}) is not found in the given table sort cycle: ${t}`)}return s[(o+1)%s.length]}connectedCallback(){this.hasAttribute("role")||this.setAttribute("role","columnheader"),super.connectedCallback()}updated(t){!this.isSortable||t.has("sortDirection")||this.sortDirection||(this.sortDirection=m.NONE),this._hasAILabel?this.setAttribute("ai-label",""):this.removeAttribute("ai-label")}render(){const{sortDirection:t}=this,s=i({[`${a}--table-header-label`]:!0,[`${a}--table-header-label--slug`]:this._hasAILabel});if(t){const s=t===m.NONE?l({part:"sort-icon",class:`${a}--table-sort__icon-unsorted`}):r({part:"sort-icon",class:`${a}--table-sort__icon`});return e`
        <button
          part="sort-button"
          class="${a}--table-sort"
          title="${this.innerText}"
          @click=${this._handleClickSortButton}>
          <span class="${a}--table-sort__flex">
            <span part="label-text" class="${a}--table-header-label"
              ><slot @slotchange=${this._handleSlotChange}></slot
            ></span>
            ${s}
            <slot
              name="ai-label"
              @slotchange="${this._handleAILabelSlotChange}"></slot>
            <slot
              name="slug"
              @slotchange="${this._handleAILabelSlotChange}"></slot>
          </span>
        </button>
      `}return e`<span part="label-text" class="${s}">
      <slot></slot
      ><slot
        name="ai-label"
        @slotchange="${this._handleAILabelSlotChange}"></slot>
      <slot name="slug" @slotchange="${this._handleAILabelSlotChange}"></slot
    ></span> `}static get slugItem(){return`${a}-slug`}static get aiLabelItem(){return`${a}-ai-label`}static get eventBeforeSort(){return`${a}-table-header-cell-sort`}};p.shadowRootOptions=Object.assign(Object.assign({},s.shadowRootOptions),{delegatesFocus:!0}),p.styles=b,p.TABLE_SORT_CYCLES=c,t([o({type:Boolean,reflect:!0,attribute:"expandable"})],p.prototype,"isExpandable",void 0),t([o({type:Boolean,reflect:!0,attribute:"is-selectable"})],p.prototype,"isSelectable",void 0),t([o({type:Boolean,reflect:!0,attribute:"is-sortable"})],p.prototype,"isSortable",void 0),t([o({type:Boolean,reflect:!0,attribute:"sort-active"})],p.prototype,"sortActive",void 0),t([o({reflect:!0,attribute:"sort-cycle"})],p.prototype,"sortCycle",void 0),t([o({reflect:!0,attribute:"sort-direction"})],p.prototype,"sortDirection",void 0),p=t([d(`${a}-table-header-cell`)],p);export{h as TABLE_SORT_CYCLE,c as TABLE_SORT_CYCLES,m as TABLE_SORT_DIRECTION};
