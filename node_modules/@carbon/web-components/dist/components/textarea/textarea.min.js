/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as t}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as e}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as i}from"../../node_modules/lit-element/lit-element.min.js";import{property as a}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{query as s}from"../../node_modules/@lit/reactive-element/decorators/query.min.js";import{classMap as o}from"../../node_modules/lit-html/directives/class-map.min.js";import l from"../../packages/icons/lib/warning--filled/16.min.js";import r from"../../packages/icons/lib/warning--alt--filled/16.min.js";import{prefix as n}from"../../globals/settings.min.js";import d from"../../globals/directives/if-non-empty.min.js";import{ifDefined as h}from"../../node_modules/lit-html/directives/if-defined.min.js";import m from"../text-input/text-input.min.js";import u from"./textarea.scss.min.js";import{carbonElement as p}from"../../globals/decorators/carbon-element.min.js";let c=class extends m{constructor(){super(...arguments),this.counterMode="character",this.id="",this.pattern="",this.required=!1,this.rows=4,this._prevCounterMode=this.counterMode}_onKeyDown(t){var e,i;if(!this.disabled&&this.enableCounter&&"word"===this.counterMode){const a=(null===(i=null===(e=this.value)||void 0===e?void 0:e.match(/\p{L}+/gu))||void 0===i?void 0:i.length)||0;(this.maxCount&&a>=this.maxCount&&" "===t.key||this.maxCount&&a>=this.maxCount&&"Enter"===t.key)&&t.preventDefault()}}_onPaste(t){var e;if("word"===this.counterMode&&this.enableCounter&&void 0!==this.maxCount){const i=this._textarea.value.match(/\p{L}+/gu)||[],a=(null===(e=t.clipboardData)||void 0===e?void 0:e.getData("Text").match(/\p{L}+/gu))||[];if(i.length+a.length>this.maxCount){t.preventDefault();const e=i.concat(a).slice(0,this.maxCount);this._textarea.value=e.join(" "),this._textarea.dispatchEvent(new InputEvent("input",{inputType:"insertFromPaste",data:e.join(" "),bubbles:!0}))}}}_handleInput({target:t}){this.value=t.value}render(){var t,i,a,s;const{enableCounter:m,maxCount:u}=this,p=null!==(i=null===(t=this.value)||void 0===t?void 0:t.length)&&void 0!==i?i:0,c=(null===(s=null===(a=this.value)||void 0===a?void 0:a.match(/\p{L}+/gu))||void 0===s?void 0:s.length)||0,v=l({class:`${n}--text-area__invalid-icon`}),$=r({class:`${n}--text-area__invalid-icon ${n}--text-area__invalid-icon--warning`}),x=o({[`${n}--text-area`]:!0,[`${n}--text-area--warn`]:this.warn,[`${n}--text-area--invalid`]:this.invalid,[`${n}--text-area__wrapper--decorator`]:this._hasAILabel}),_=o({[`${n}--text-area__wrapper`]:!0,[`${n}--text-area__wrapper--cols`]:this.cols,[`${n}--text-area__wrapper--warn`]:this.warn,[`${n}--text-area__wrapper--readonly`]:this.readonly}),b=o({[`${n}--label`]:!0,[`${n}--visually-hidden`]:this.hideLabel,[`${n}--label--disabled`]:this.disabled}),f=o({[`${n}--label`]:!0,[`${n}--label--disabled`]:this.disabled}),g=o({[`${n}--form__helper-text`]:!0,[`${n}--form__helper-text--disabled`]:this.disabled}),w=m&&u?e` <label class="${f}">
            <slot name="label-text"
              >${"word"===this.counterMode?c:p}/${u}</slot
            >
          </label>`:null;return e`
      <div class="${n}--text-area__label-wrapper">
        <label class="${b}" for="input">
          <slot name="label-text"> ${this.label} </slot>
        </label>
        ${w}
      </div>
      <div class="${_}" ?data-invalid="${this.invalid}">
        ${(()=>this.invalid?v:this.warn&&!this.invalid?$:null)()}
        <textarea
          autocomplete="${this.autocomplete}"
          ?autofocus="${this.autofocus}"
          class="${x}"
          cols="${h(this.cols)}"
          ?data-invalid="${this.invalid}"
          ?disabled="${this.disabled}"
          id="input"
          name="${d(this.name)}"
          pattern="${d(this.pattern)}"
          placeholder="${d(this.placeholder)}"
          ?readonly="${this.readonly}"
          ?required="${this.required}"
          rows="${h(this.rows)}"
          .value="${this.value}"
          maxlength="${"character"===this.counterMode?d(this.maxCount):""}"
          @keydown="${this._onKeyDown}"
          @paste="${this._onPaste}"
          @input="${this._handleInput}"></textarea>
        <slot name="ai-label" @slotchange="${this._handleSlotChange}"></slot>
        <slot name="slug" @slotchange="${this._handleSlotChange}"></slot>
      </div>
      <div class="${g}" ?hidden="${this.invalid||this.warn}">
        <slot name="helper-text"> ${this.helperText} </slot>
      </div>
      <div
        class="${n}--form-requirement"
        ?hidden="${!this.invalid&&!this.warn}">
        <slot name="${this.invalid?"invalid-text":"warn-text"}">
          ${this.invalid?this.invalidText:this.warnText}
        </slot>
      </div>
    `}updated(){var t;if(null===(t=super.updated)||void 0===t||t.call(this),this.counterMode!==this._prevCounterMode){const t=this._textarea;t&&("character"===this.counterMode?t.setAttribute("maxlength",String(this.maxCount)):t.removeAttribute("maxlength")),this._prevCounterMode=this.counterMode}}};c.shadowRootOptions=Object.assign(Object.assign({},i.shadowRootOptions),{delegatesFocus:!0}),c.styles=u,t([a({type:Number})],c.prototype,"cols",void 0),t([a({type:String,reflect:!0,hasChanged:(t,e)=>("character"===t||"word"===t)&&t!==e,attribute:"counter-mode"})],c.prototype,"counterMode",void 0),t([a()],c.prototype,"id",void 0),t([a()],c.prototype,"pattern",void 0),t([a({type:Boolean,reflect:!0})],c.prototype,"required",void 0),t([a()],c.prototype,"rows",void 0),t([s("textarea")],c.prototype,"_textarea",void 0),c=t([p(`${n}-textarea`)],c);
