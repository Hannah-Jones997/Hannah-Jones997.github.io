/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as e}from"../../node_modules/tslib/tslib.es6.min.js";import{classMap as t}from"../../node_modules/lit-html/directives/class-map.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{svg as s,html as o}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as l}from"../../node_modules/lit-element/lit-element.min.js";import{property as i}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{query as a}from"../../node_modules/@lit/reactive-element/decorators/query.min.js";import n from"../../packages/icons/lib/checkbox/16.min.js";import r from"../../packages/icons/lib/checkbox--checked--filled/16.min.js";import{prefix as c}from"../../globals/settings.min.js";import d from"../../globals/mixins/focus.min.js";import h from"../../globals/mixins/host-listener.min.js";import{FORM_ELEMENT_COLOR_SCHEME as m}from"../../globals/shared-enums.min.js";import u from"./tile.scss.min.js";import{carbonElement as p}from"../../globals/decorators/carbon-element.min.js";let b=class extends(h(d(l))){constructor(){super(...arguments),this._inputType="checkbox",this._hasAILabel=!1,this._handleClick=()=>{this.selected=!this.selected;const{eventChange:e}=this.constructor;this.dispatchEvent(new CustomEvent(e,{bubbles:!0,composed:!0,detail:{selected:this.selected}}))},this._handleKeydown=e=>{var t,s;const{key:o}=e;" "!==o&&"Enter"!==o||(null===(t=e.target)||void 0===t?void 0:t.matches(this.constructor.aiLabelItem))||(null===(s=e.target)||void 0===s?void 0:s.matches(this.constructor.slugItem))||(this.selected=!this.selected)},this.colorScheme=m.REGULAR,this.disabled=!1,this.hasRoundedCorners=!1,this.selected=!1}_handleSlotChange({target:e}){const t=e.assignedNodes().filter((e=>{var t,s;return void 0!==e.matches&&(e.matches(null===(t=this.constructor)||void 0===t?void 0:t.aiLabelItem)||e.matches(null===(s=this.constructor)||void 0===s?void 0:s.slugItem))}));t.length>0&&(this._hasAILabel=Boolean(t),t[0].setAttribute("size","xs")),this.requestUpdate()}_handleChange(){this.selected=this._inputNode.checked;const e=this.selected,{eventChange:t}=this.constructor;this.dispatchEvent(new CustomEvent(t,{bubbles:!0,composed:!0,detail:{selected:e}}))}_renderIcon(){const{selected:e,checkmarkLabel:t}=this;return o` ${e?r({children:t?s`<title>${t}</title>`:void 0}):n({children:t?s`<title>${t}</title>`:void 0})}`}updated(){this._hasAILabel?this.setAttribute("ai-label",""):this.removeAttribute("ai-label")}render(){const{colorScheme:e,disabled:s,hasRoundedCorners:l,name:i,selected:a,value:n,_handleChange:r,_hasAILabel:d}=this,h=t({[`${c}--tile`]:!0,[`${c}--tile--disabled`]:s,[`${c}--tile--selectable`]:!0,[`${c}--tile--is-selected`]:a,[`${c}--tile--${e}`]:e,[`${c}--tile--slug-rounded`]:d&&l});return o`
      <div
        class=${h}
        role="checkbox"
        aria-checked=${a}
        @change=${r}
        tabindex=${s?void 0:0}
        name=${i}
        value=${n}
        @click=${s?void 0:this._handleClick}
        @keydown=${this._handleKeydown}>
        <span
          class="${c}--tile__checkmark ${c}--tile__checkmark--persistent">
          ${this._renderIcon()}
        </span>
        <label class="${c}--tile-content">
          <slot></slot>
        </label>
        <slot name="decorator"></slot>
        <slot name="ai-label" @slotchange="${this._handleSlotChange}"></slot>
        <slot name="slug" @slotchange="${this._handleSlotChange}"></slot>
      </div>
    `}static get slugItem(){return`${c}-slug`}static get aiLabelItem(){return`${c}-ai-label`}static get eventChange(){return`${c}-selectable-tile-changed`}};b.shadowRootOptions=Object.assign(Object.assign({},l.shadowRootOptions),{delegatesFocus:!0}),b.styles=u,e([a("input")],b.prototype,"_inputNode",void 0),e([i({attribute:"checkmark-label"})],b.prototype,"checkmarkLabel",void 0),e([i({attribute:"color-scheme",reflect:!0})],b.prototype,"colorScheme",void 0),e([i({type:Boolean,reflect:!0})],b.prototype,"disabled",void 0),e([i({type:Boolean,attribute:"has-rounded-corners"})],b.prototype,"hasRoundedCorners",void 0),e([i()],b.prototype,"name",void 0),e([i({type:Boolean,reflect:!0})],b.prototype,"selected",void 0),e([i()],b.prototype,"value",void 0),b=e([p(`${c}-selectable-tile`)],b);var v=b;export{v as default};
