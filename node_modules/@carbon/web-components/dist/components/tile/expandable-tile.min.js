/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license
 * 
 * This bundle contains the following third-party dependencies:
 * 
 * Also refer to the following links for the license of other third-party dependencies:
 * 
 * https://www.npmjs.com/package/tslib
 * https://www.npmjs.com/package/lit
 * https://www.npmjs.com/package/@lit/context
 * https://www.npmjs.com/package/lodash-es
 * https://www.npmjs.com/package/@floating-ui/dom
 * https://www.npmjs.com/package/flatpickr
 * https://www.npmjs.com/package/lit-html
 * https://www.npmjs.com/package/lit-element
 * https://www.npmjs.com/package/@lit/reactive-element
 * https://www.npmjs.com/package/@floating-ui/core
 * https://www.npmjs.com/package/@floating-ui/utils
 */

import{__decorate as e}from"../../node_modules/tslib/tslib.es6.min.js";import"../../node_modules/@lit/reactive-element/reactive-element.min.js";import{html as t}from"../../node_modules/lit-html/lit-html.min.js";import{LitElement as o}from"../../node_modules/lit-element/lit-element.min.js";import{property as i}from"../../node_modules/@lit/reactive-element/decorators/property.min.js";import{ifDefined as s}from"../../node_modules/lit-html/directives/if-defined.min.js";import n from"../../packages/icons/lib/chevron--down/16.min.js";import{prefix as l}from"../../globals/settings.min.js";import a from"../../globals/decorators/host-listener.min.js";import r from"../../globals/mixins/focus.min.js";import d from"../../globals/mixins/host-listener.min.js";import{FORM_ELEMENT_COLOR_SCHEME as h}from"../../globals/shared-enums.min.js";import c from"./tile.scss.min.js";import{classMap as m}from"../../node_modules/lit-html/directives/class-map.min.js";import{carbonElement as p}from"../../globals/decorators/carbon-element.min.js";let g=class extends(d(r(o))){constructor(){super(...arguments),this._belowTheContentHeight=0,this._hasAILabel=!1,this._handleClick=()=>{this.withInteractive||this._handleExpand()},this.colorScheme=h.REGULAR,this.expanded=!1,this.hasRoundedCorners=!1,this.withInteractive=!1}_handleSlotChange({target:e}){const t=e.assignedNodes().filter((e=>{var t,o;return void 0!==e.matches&&(e.matches(null===(t=this.constructor)||void 0===t?void 0:t.aiLabelItem)||e.matches(null===(o=this.constructor)||void 0===o?void 0:o.slugItem))}));t.length>0&&(this._hasAILabel=Boolean(t),t[0].setAttribute("size","xs")),this.requestUpdate()}_handleSlotChangeBelowTheFoldContent(e){if(this._belowTheContentHeight=e.target.assignedNodes().reduce(((e,t)=>{var o;return e+(null!==(o=t.offsetHeight)&&void 0!==o?o:0)}),0),!this._belowTheContentHeight){const e=getComputedStyle(this.querySelector("cds-tile-below-the-fold-content"));this._belowTheContentHeight=parseInt(e.height,10)}this.requestUpdate()}_handleExpand(){const e=!this.expanded;this.focus();const t={bubbles:!0,composed:!0,detail:{expanded:e}},o=this.constructor,i=new CustomEvent(o.eventBeforeToggle,Object.assign(Object.assign({},t),{cancelable:!0}));if(this.dispatchEvent(i)){this.expanded=e;const i=new CustomEvent(o.eventToggle,t);this.dispatchEvent(i)}}updated(){this._hasAILabel?this.setAttribute("ai-label",""):this.removeAttribute("ai-label")}render(){const{expanded:e,withInteractive:o,_belowTheContentHeight:i,_handleSlotChangeBelowTheFoldContent:a}=this,r=m({[`${l}--tile__chevron`]:!0,[`${l}--tile__chevron--interactive`]:o});return t`
      <button
        class="${r}"
        aria-labelledby="above-the-fold-content"
        aria-controls="below-the-fold-content"
        tabindex="0"
        @click="${o?this._handleExpand:""}"
        aria-expanded="${String(Boolean(e))}">
        ${n({id:"icon"})}
      </button>
      <slot name="ai-label" @slotchange="${this._handleSlotChange}"></slot>
      <slot name="slug" @slotchange="${this._handleSlotChange}"></slot>
      <slot name="decorator"></slot>
      <div id="content" class="${l}--tile-content">
        <div><slot name="above-the-fold-content"></slot></div>
        <div
          class="${l}-ce--expandable-tile--below-the-fold-content"
          style="${s(e?`max-height: ${i}px`:void 0)}">
          <slot @slotchange="${a}"></slot>
        </div>
      </div>
    `}static get slugItem(){return`${l}-slug`}static get aiLabelItem(){return`${l}-ai-label`}static get eventBeforeToggle(){return`${l}-expandable-tile-beingtoggled`}static get eventToggle(){return`${l}-expandable-tile-toggled`}};g.styles=c,e([a("click")],g.prototype,"_handleClick",void 0),e([i({attribute:"color-scheme",reflect:!0})],g.prototype,"colorScheme",void 0),e([i({type:Boolean,reflect:!0})],g.prototype,"expanded",void 0),e([i({type:Boolean,attribute:"has-rounded-corners"})],g.prototype,"hasRoundedCorners",void 0),e([i({type:Boolean,reflect:!0,attribute:"with-interactive"})],g.prototype,"withInteractive",void 0),g=e([p(`${l}-expandable-tile`)],g);
